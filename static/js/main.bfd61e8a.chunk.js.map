{"version":3,"sources":["modules/Footer.tsx","modules/result/Column.ts","modules/result/NumberCol.ts","modules/result/StringCol.ts","domain/Course.ts","domain/CourseBlock.ts","domain/CourseCombination.ts","domain/Pupil.ts","domain/GradeLevel.ts","domain/solve/Move.ts","domain/solve/CombiDistribution.ts","domain/solve/ModeSwitchMove.ts","domain/solve/FinishMove.ts","domain/solve/LevelSlicer.ts","modules/result/ResultTable.tsx","modules/result/Result.tsx","modules/LevelDisplay.tsx","modules/SolutionDisplay.tsx","modules/Input.tsx","modules/Navbar/HelpDialog.tsx","modules/Navbar.tsx","pages/App.tsx","index.tsx"],"names":["Footer","className","style","fontSize","process","href","Column","aProp","aTitle","aTip","prop","title","tip","this","rowA","rowB","compareVal","value","NumberCol","row","a","b","StringCol","localeCompare","Course","theNo","name","no","block","members","combinations","member","push","combi","aBlock","Error","length","other","some","p","includes","getIndex","combis","CourseBlock","courseList","self","forEach","c","setBlock","CourseCombination","courses","combiSize","connectedCombis","course","addCombination","otherCombis","Set","allMembers","getCombinations","add","getMembers","pupil","delete","Array","from","size","i","lo","count","contacts","getContacts","crossCombis","getName","blockCount","res","Pupil","firstname","lastname","courseCombination","group","getCourses","GradeLevel","data","pupilList","combinationList","blockList","initFromData","pupilCourses","currentCourses","courseMap","Map","slice","fields","courseName","getCourse","addMember","initBlocks","sortCoursesByBlock","initCourseCombinations","orderedList","fill","j","getBlock","combiName","combiMap","nameForCourseList","has","get","set","setCourseCombination","initConnectedCombis","reduce","entry","concat","indices","seenPupil","blockCourses","blockNo","sort","getMemberCount","next","splice","sum","console","log","table","pupilTable","combiTable","courseTable","map","each","asLO","loCols","Move","combination","to","progress","slicer","revertMove","CombiDistribution","aCombi","aSlicer","courseIndices","memberCounts","combiSizes","connectedDistris","getSize","allDistris","getConnectedCombis","connected","undefined","_","resultList","courseSizes","maxSizes","sourceAdvantages","targetPenaltys","getCourseSizes","getMaxSizes","courseIdx","weightSizeGrowth","adv","pen","sources","targets","filter","every","advantageOnRemoveFrom","penaltyOnAddTo","fromIdx","toIdx","move","removeMemberFromSlice","addMemberToSlice","dist","cs","pupilsTable","pos","max","getMember","groupCount","ModeSwitchMove","revertModeSwitch","FinishMove","revertFinish","LevelSlicer","aSize","aLevel","initializer","speed","moveTolerance","groupRestrict","groupTolerance","sizeWeighting","level","distributions","cfgString","moveRandom","reduceGroups","finished","moveList","moveSlowly","oversizeWeighther","fillConnected","initRandomlyDistributed","initAllIntoFirstSlice","Math","ceil","prefSmallOversizeWeighther","prefBigOversizeWeighther","squaredOversizeWeighther","equalOversizeWeighther","iterations","best","optimize","current","currentContacts","getCombination","getCourseCombination","floor","random","cur","doMove","candidateMoves","idx","findGroupSizeMoves","findContactMoves","pop","revert","revMove","groupSizes","siz","getOversizeSum","getOversizeMax","courseCols","getBlocks","setPupilsGroups","pupilCols","ResultTable","list","columns","selections","setSelection","selectedRows","updateSelectedRow","useState","sortColumn","setSortColumn","sortedIndices","setSortedIndices","useEffect","csv","col","resO","obj","dataURL","encodeURIComponent","display","download","rawIdx","onClick","e","preventDefault","colIdx","newOrder","compare","doSort","data-toggle","data-placement","rowi","ev","coli","Result","holder","selPupils","setSelPupils","selCourses","setSelCourses","selCombis","setSelCombis","provider","getLevel","combiCols","allCombis","LevelDisplay","SolutionDisplay","getMoveCount","isFinished","Input","gradeLevel","setGradeLevel","levelSlicer","setLevelSlicer","sliceCount","setSliceCount","setInitializer","setGroupRestrict","setGroupTolerance","setMove","setSpeed","relMoves","setRelMoves","setIterations","result","setResult","setSizeWeighting","calculating","setCalculating","updateResult","loadGradeData","htmlFor","window","location","protocol","startsWith","alert","Papa","parse","complete","inputId","cssInputClass","parserOptions","onFileLoaded","type","step","id","min","onChange","target","valueAsNumber","disabled","undoLastMove","setTimeout","solve","role","aria-hidden","HelpDialog","data-target","aria-labelledby","data-dismiss","aria-label","Navbar","App","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.bfd61e8a.chunk.js","sourcesContent":["interface Props {}\n\nconst Footer: React.FC<Props> = () => (\n  <footer className=\"footer p-2 bg-light text-center\">\n    <span className=\"text-muted\" style={{ fontSize: '0.875rem' }}>\n      SchoolSplitter {process.env.REACT_APP_VERSION} - (C) 2020 by KlausCall\n      &amp; Korki43 - MIT licensed - source hosted on{' '}\n      <a href=\"https://github.com/KlausCall/SchoolSplitter\">GitHub</a>\n    </span>\n  </footer>\n);\n\nexport default Footer;\n","export abstract class Column<T> {\n  readonly prop: string;\n  readonly title: string;\n  readonly tip?: string;\n\n  constructor(aProp: string, aTitle: string, aTip?: string) {\n    this.prop = aProp;\n    this.title = aTitle;\n    this.tip = aTip;\n  }\n\n  abstract value(row: any) : T;\n\n  abstract compareVal(a:T, b:T): number;\n\n  public compare(rowA: any, rowB: any): number {\n    return this.compareVal(this.value(rowA), this.value(rowB));\n  }\n\n}\n","import { Column } from \"./Column\";\n\nexport class NumberCol extends Column<number> {\n\n  value(row: any): number {\n    return row[this.prop] as number;\n  }\n\n  compareVal(a: number, b: number): number {\n    return a - b;\n  }\n\n}\n","import { Column } from \"./Column\";\n\nexport class StringCol extends Column<string> {\n\n  value(row: any): string {\n    return row[this.prop] as string;\n  }\n  compareVal(a: string, b: string): number {\n    return a.localeCompare(b);\n  }\n\n}\n","import { CourseBlock } from './CourseBlock';\nimport { Pupil } from './Pupil';\nimport { CourseCombination } from './CourseCombination';\nimport { NumberCol } from '../modules/result/NumberCol';\nimport { StringCol } from '../modules/result/StringCol';\n\nexport class Course {\n  readonly no: number;\n  readonly name: string;\n  private block?: CourseBlock;\n  private members: Pupil[];\n  private combinations: CourseCombination[];\n\n  constructor(theNo: number, name: string) {\n    this.no = theNo;\n    this.name = name;\n    this.members = [];\n    this.combinations = [];\n  }\n\n  public addMember(member: Pupil) {\n    this.members.push(member);\n  }\n\n  public addCombination(combi: CourseCombination) {\n    this.combinations.push(combi);\n  }\n\n  public getIndex() {\n    return this.no;\n  }\n\n  public setBlock(aBlock: CourseBlock) {\n    this.block = aBlock;\n  }\n\n  public getBlock(): CourseBlock {\n    if (this.block) {\n      return this.block;\n    } else {\n      throw new Error('Block not set.');\n    }\n  }\n\n  public getMemberCount(): number {\n    return this.members.length;\n  }\n\n  public getMembers() {\n    return this.members;\n  }\n\n  public getName() {\n    return this.name;\n  }\n\n  public getCombinations() {\n    return this.combinations;\n  }\n\n  public hasCommonPupil(other: Course): boolean {\n    return this.members.some((p) => other.members.includes(p));\n  }\n\n  /*\n   *  output support\n   */\n  public asLO() {\n    var lo: any = {\n      no: this.no + 1,\n      name: this.name,\n      block: this.block ? this.block.getIndex() + 1 : null,\n      members: this.members.length,\n      combis: this.combinations.length,\n    };\n    return lo;\n  }\n\n  public static loCols() {\n    return [\n      new NumberCol(\"no\", \"Nr.\", \"Kursnummer\"),\n      new StringCol(\"name\", \"Name\", \"Name des Kurs\"),\n      new NumberCol(\"block\", \"Block\", \"Blocknummer des Kurs\"),\n      new NumberCol(\"members\", \"# Schüler\", \"Anzahl Schüler im Kurs\"),\n      new NumberCol(\"combis\", \"# Kombi.\", \"Anzahl Kombinationen die\\ndiesen Kurs enthalten.\"),\n    ];\n  }\n\n}\n","import { Course } from './Course';\n\nexport class CourseBlock {\n  readonly no: number;\n  private courseList: Course[];\n  constructor(theNo: number, courseList: Course[]) {\n    this.no = theNo;\n    this.courseList = courseList;\n    const self = this;\n    courseList.forEach((c) => c.setBlock(self));\n  }\n  public getIndex() {\n    return this.no;\n  }\n}\n","import { Column } from '../modules/result/Column';\nimport { NumberCol } from '../modules/result/NumberCol';\nimport { StringCol } from '../modules/result/StringCol';\nimport { Course } from './Course';\nimport { Pupil } from './Pupil';\n\nexport class CourseCombination {\n  readonly no: number;\n  readonly name: string;\n  private courseList: Course[];\n  private members: Pupil[];\n  private combiSize: number;\n\n  // holds all course combinations sharing at least one course\n  private connectedCombis?: CourseCombination[];\n\n  constructor(theNo: number, name: string, courses: Course[]) {\n    this.no = theNo;\n    this.name = name;\n    this.courseList = courses;\n    this.members = [];\n    this.combiSize = 0;\n    var self = this;\n    this.courseList.forEach((course) => course?.addCombination(self));\n  }\n\n  /**\n   * initializes connected combis.\n   * may only be called once after all combis are created!\n   */\n  public initConnectedCombis() {\n    var otherCombis = new Set<CourseCombination>();\n    var allMembers = new Set<Pupil>();\n    this.courseList.forEach((course) => {\n      if (course != null) {\n        course.getCombinations().forEach((combi) => otherCombis.add(combi));\n        course.getMembers().forEach((pupil) => allMembers.add(pupil));\n      }\n    });\n    otherCombis.delete(this);\n    this.connectedCombis = Array.from(otherCombis);\n    this.combiSize = allMembers.size;\n  }\n\n  public getIndex() {\n    return this.no;\n  }\n\n  public addMember(member: Pupil) {\n    this.members.push(member);\n  }\n\n  public getCourses(): Course[] {\n    return this.courseList;\n  }\n\n  public getConnectedCombis(): CourseCombination[] {\n    return this.connectedCombis!;\n  }\n\n  public getMember(i: number) {\n    return this.members[i];\n  }\n\n  public getMembers() {\n    return this.members;\n  }\n\n  public getMemberCount(): number {\n    return this.members.length;\n  }\n\n  public getCombiSize(): number {\n    return this.combiSize;\n  }\n\n  public getContacts(): number {\n    return this.members.length * (this.combiSize - 1);\n  }\n\n  /*\n   *  output support\n   */\n  public asLO() {\n    var lo: any = {\n      no: this.no + 1,\n      count: this.members.length,\n      combiSize: this.combiSize,\n      contacts: this.getContacts(),\n      crossCombis: this.connectedCombis?.length,\n    };\n    this.courseList.forEach((course, i) => {\n      lo['block-' + (i + 1)] = course == null ? '--' : course.getName();\n    });\n    return lo;\n  }\n\n  public static loCols(blockCount: number) {\n    var res : Column<any>[];\n    res =  [\n      new NumberCol(\"no\", \"Nr.\", \"Nummer der Kombination\"),\n      new NumberCol(\"count\", \"# Schüler\", \"Anzahl Schüler mit\\ndieser Kursbelegung\"),\n      new NumberCol(\"combiSize\", \"Größe\", \"Anzahl Schüler in allen\\nKursen  dieser Kombination\"),\n      new NumberCol(\"contacts\", \"# Kontakte\", \"Anzahl Kontaktpaare\\nin dieser Komination\"),\n      new NumberCol(\"crossCombis\", \"# verb. Komb.\", \"Anzahl Kombinationen die min.\\neinen gemeinsamen Kurs haben\"),\n    ];\n    for (let i = 1; i <= blockCount; i ++) {\n      res.push(new StringCol(`block-${i}`, `Block ${i}`, `Im ${i}-ten Block belegter Kurs`));\n    }\n    return res;\n  }\n\n}\n","import { NumberCol } from '../modules/result/NumberCol';\nimport { StringCol } from '../modules/result/StringCol';\nimport { CourseCombination } from './CourseCombination';\n\nexport class Pupil {\n  readonly no: number;\n  readonly firstname: string;\n  readonly lastname: string;\n  private courseCombination!: CourseCombination;\n\n  constructor(theNo: number, firstname: string, lastname: string) {\n    this.no = theNo;\n    this.firstname = firstname;\n    this.lastname = lastname;\n  }\n\n  public setCourseCombination(combi: CourseCombination) {\n    this.courseCombination = combi;\n  }\n\n  public getCourseCombination() {\n    return this.courseCombination;\n  }\n\n  public getIndex() {\n    return this.no;\n  }\n\n  /*\n   *  output support\n   */\n  public asLO() {\n    var lo: any = {\n      no: this.no + 1,\n      firstname: this.firstname,\n      lastname: this.lastname,\n      combi: this.courseCombination.getIndex() + 1,\n      group: 0,\n    };\n    this.courseCombination.getCourses().forEach((course, i) => {\n      lo['block-' + (i + 1)] = course == null ? '--' : course.getName();\n    });\n    return lo;\n  }\n\n  public static loCols(blockCount: number) {\n    var res =  [\n      new NumberCol(\"no\", \"Nr.\", \"Nummer des Schülers\"),\n      new StringCol(\"firstname\", \"Vorname\", \"Vorname des Schülers\"),\n      new StringCol(\"lastname\", \"Nachname\", \"Nachname des Schülers\"),\n      new NumberCol(\"combi\", \"Kombi.\", \"Nummer der Kurs-Kombination\\ndie der Schüler belegt hat\"),\n      new NumberCol(\"group\", \"Gruppe\", \"Nummer der Gruppe, der\\nder Schüler zugeordnet wurde\"),\n    ];\n    for (let i = 1; i <= blockCount; i ++) {\n      res.push(new StringCol(`block-${i}`, `Block ${i}`, `Im ${i}-ten Block belegter Kurs`));\n    }\n    return res;\n  }\n\n}\n","import { Course } from './Course';\nimport { CourseBlock } from './CourseBlock';\nimport { CourseCombination } from './CourseCombination';\nimport { Pupil } from './Pupil';\nimport ResultProvider from './ResultProvider';\n\nexport class GradeLevel implements ResultProvider {\n  private pupilList: Pupil[];\n  private courseList: Course[];\n  private combinationList: CourseCombination[];\n  private blockList: CourseBlock[];\n\n  constructor(data: string[][]) {\n    this.pupilList = [];\n    this.courseList = [];\n    this.combinationList = [];\n    this.blockList = [];\n\n    this.initFromData(data);\n  }\n\n  private initFromData(data: string[][]) {\n    var pupilCourses: Course[][];\n    var currentCourses: Course[];\n    var courseMap: Map<string, Course>;\n    courseMap = new Map();\n    pupilCourses = [];\n    data.slice(1).forEach((fields) => {\n      if (fields.length > 2) {\n        const pupil = new Pupil(this.pupilList.length, fields[0], fields[1]);\n        this.pupilList.push(pupil);\n        currentCourses = [];\n        pupilCourses.push(currentCourses);\n        fields.slice(2).forEach((courseName) => {\n          if (courseName.length > 0) {\n            const course = this.getCourse(courseMap, courseName);\n            course.addMember(pupil);\n            currentCourses.push(course);\n          }\n        });\n      }\n    });\n    this.initBlocks();\n    this.sortCoursesByBlock(pupilCourses);\n    this.initCourseCombinations(pupilCourses);\n  }\n\n  private sortCoursesByBlock(pupilCourses: Course[][]) {\n    for (let i = 0; i < pupilCourses.length; i++) {\n      const courseList = pupilCourses[i];\n      var orderedList: Course[] = new Array(this.blockList.length).fill(null);\n      for (let j = 0; j < courseList.length; j++) {\n        const course = courseList[j];\n        orderedList[course.getBlock().getIndex()] = course;\n      }\n      pupilCourses[i] = orderedList;\n    }\n  }\n\n  private initCourseCombinations(pupilCourses: Course[][]) {\n    var combiMap = new Map<string, CourseCombination>();\n    var combiName: string;\n    var combi: CourseCombination;\n    for (let i = 0; i < pupilCourses.length; i++) {\n      const courses = pupilCourses[i];\n      combiName = this.nameForCourseList(courses);\n      if (combiMap.has(combiName)) {\n        combi = combiMap.get(combiName)!;\n      } else {\n        combi = new CourseCombination(\n          this.combinationList.length,\n          combiName,\n          courses\n        );\n        combiMap.set(combiName, combi);\n        this.combinationList.push(combi);\n      }\n      this.pupilList[i].setCourseCombination(combi);\n      combi.addMember(this.pupilList[i]);\n    }\n    this.combinationList.forEach((combi) => combi.initConnectedCombis());\n  }\n\n  private nameForCourseList(courses: Course[]): string {\n    return courses.reduce(\n      (res, entry) =>\n        res.concat(entry == null ? '--' : entry.getName()).concat(';'),\n      ''\n    );\n  }\n\n  /**\n   * calculate blocks of courses running at the same time\n   * within one block a pupil can only be member of one course.\n   */\n  private initBlocks() {\n    var indices: number[];\n    var seenPupil: Pupil[];\n    var blockCourses: Course[];\n    var blockNo: number = 0;\n    const courses = Array.from(this.courseList);\n    courses.sort((a, b) => b.getMemberCount() - a.getMemberCount());\n\n    while (courses.length !== 0) {\n      indices = [0];\n      blockCourses = [courses[0]];\n      seenPupil = courses[0].getMembers();\n      for (let i = 1; i < courses.length; i++) {\n        const next = courses[i];\n        // eslint-disable-next-line\n        if (!next.getMembers().some((p) => seenPupil.includes(p))) {\n          blockCourses.push(next);\n          indices.push(i);\n          seenPupil = seenPupil.concat(next.getMembers());\n          if (seenPupil.length === this.pupilList.length) break;\n        }\n      }\n      // remove used courses\n      for (let i = indices.length - 1; i >= 0; i--) {\n        courses.splice(indices[i], 1);\n      }\n      // build block\n      this.blockList.push(new CourseBlock(blockNo, blockCourses));\n      blockNo++;\n    }\n  }\n\n  public getMembers() {\n    return this.pupilList;\n  }\n\n  public getCourses() {\n    return this.courseList;\n  }\n\n  public getBlocks(): CourseBlock[] {\n    return this.blockList;\n  }\n\n  public getCombinations(): CourseCombination[] {\n    return this.combinationList;\n  }\n\n  private getCourse(courseMap: Map<string, Course>, name: string): Course {\n    if (courseMap.has(name)) {\n      return courseMap.get(name)!;\n    } else {\n      const course = new Course(this.courseList.length, name);\n      this.courseList.push(course);\n      courseMap.set(name, course);\n      return course;\n    }\n  }\n\n  public getContacts(): number {\n    return this.combinationList.reduce(\n      (sum, combi) => sum + combi.getContacts(),\n      0\n    );\n  }\n  /*\n   *  output support\n   */\n  public getLevel() {\n    return this;\n  }\n\n  public displayString() {\n    return `Pupils: ${this.pupilList.length}; Courses: ${\n      this.courseList.length\n    }; Blocks: ${this.blockList.length}; Combinations: ${\n      this.combinationList.length\n    }; Contacts: ${this.getContacts()}`;\n  }\n\n  public print() {\n    console.log('PUPILS');\n    console.table(this.pupilTable());\n    console.log('COURSE COMBINATIONS');\n    console.table(this.combiTable());\n    console.log('COURSES');\n    console.table(this.courseTable());\n    console.log('CONTACTS : ' + this.getContacts());\n  }\n\n  public pupilTable() {\n    return this.pupilList.map((each) => each.asLO());\n  }\n\n  public pupilCols() {\n    return Pupil.loCols(this.blockList.length);\n  }\n\n  public courseTable() {\n    return this.courseList.map((each) => each.asLO());\n  }\n\n  public courseCols() {\n    return Course.loCols();\n  }\n\n  public combiTable() {\n    return this.combinationList.map((each) => each.asLO());\n  }\n\n  public combiCols() {\n    return CourseCombination.loCols(this.blockList.length);\n  }\n}\n","import { LevelSlicer } from \"./LevelSlicer\";\n\nexport class Move {\n  public readonly combination: number;\n  public readonly from: number;\n  public readonly to: number;\n  public readonly progress: number;\n\n  constructor(combination: number, from: number, to: number, progress: number) {\n    this.combination = combination;\n    this.from = from;\n    this.to = to;\n    this.progress = progress;\n  }\n\n  // revert this move\n  public revert(slicer: LevelSlicer) {\n    slicer.revertMove(this);\n  }\n\n}\n","import { NumberCol } from '../../modules/result/NumberCol';\nimport { CourseCombination } from '../CourseCombination';\nimport { LevelSlicer } from './LevelSlicer';\nimport { Move } from './Move';\n\nexport class CombiDistribution {\n  readonly no: number;\n  readonly size: number;\n  readonly slicer: LevelSlicer;\n  readonly combi: CourseCombination;\n  readonly courseIndices: number[];\n  readonly memberCounts: number[];\n  readonly combiSizes: number[];\n  readonly connectedDistris: CombiDistribution[];\n\n  constructor(aCombi: CourseCombination, aSlicer: LevelSlicer) {\n    this.combi = aCombi;\n    this.slicer = aSlicer;\n    this.no = this.combi.getIndex();\n    this.size = aSlicer.getSize();\n    this.memberCounts = new Array(this.size).fill(0);\n    this.combiSizes = new Array(this.size).fill(0);\n    this.courseIndices = [];\n    this.combi.getCourses().forEach((course) => {\n      if (course != null) {\n        this.courseIndices.push(course.getIndex());\n      }\n    });\n    // wll be filled after complete creation of distris\n    this.connectedDistris = [];\n  }\n\n  /**\n   * called only once after creation of all instances.\n   *\n   * @param allDistris all created instances in slicer.\n   */\n  public fillConnected(allDistris: CombiDistribution[]) {\n    this.combi.getConnectedCombis().forEach((connected) => {\n      this.connectedDistris.push(allDistris[connected.getIndex()]);\n    });\n  }\n\n  public getIndex() {\n    return this.no;\n  }\n\n  public getContacts(slice?: number): number {\n    if (slice === undefined) {\n      return this.memberCounts.reduce(\n        (sum, _, i) => sum + this.getContacts(i),\n        0\n      );\n    } else {\n      return this.memberCounts[slice] * (this.combiSizes[slice] - 1);\n    }\n  }\n\n  public getMemberCounts() {\n    return this.memberCounts;\n  }\n\n  public getMemberCount(slice?: number): number {\n    if (slice === undefined) {\n      return this.memberCounts.reduce(\n        (sum, _, i) => sum + this.getMemberCount(i),\n        0\n      );\n    } else {\n      return this.memberCounts[slice];\n    }\n  }\n\n  public getCombination() {\n    return this.combi;\n  }\n\n  /**\n   * optimization workhorse.\n   * find moves for optimization of groupp size\n   *\n   */\n  public findGroupSizeMoves(resultList: Move[]) {\n    var courseSizes: number[][];\n    var maxSizes: number[];\n    var sourceAdvantages: number[];\n    var targetPenaltys: number[];\n\n    courseSizes = this.slicer.getCourseSizes();\n    maxSizes = this.slicer.getMaxSizes();\n\n    // calculate expected weighted changes of group size\n    sourceAdvantages = this.memberCounts.map((members, slice) => {\n      return members === 0 ? 0 \n        : this.courseIndices.reduce((sum , courseIdx) => sum + this.slicer.weightSizeGrowth(courseSizes[courseIdx][slice] - 1, maxSizes[courseIdx]) , 0 );\n    });\n    targetPenaltys = this.memberCounts.map((members, slice) => {\n      return this.courseIndices.reduce((sum , courseIdx) => sum + this.slicer.weightSizeGrowth(courseSizes[courseIdx][slice], maxSizes[courseIdx]) , 0 );\n    });\n\n    sourceAdvantages.forEach((adv, from) => {\n      if (adv > 0) {\n        targetPenaltys.forEach((pen, to) => {\n          var progress = adv - pen;\n          if (progress > 0) {\n            resultList.push(new Move(this.getIndex(), from, to, progress))\n          }\n        })\n      }\n    })\n  }\n\n  /**\n   * optimization workhorse.\n   * find moves for contact optimization.\n   *\n   */\n  public findContactMoves(resultList: Move[]) {\n    var courseSizes: number[][];\n    var maxSizes: number[];\n    var sources: number[];\n    var targets: number[];\n    var sourceAdvantages: number[];\n    var targetPenaltys: number[];\n\n    courseSizes = this.slicer.getCourseSizes();\n    maxSizes = this.slicer.getMaxSizes();\n    // find allowed source group indices\n    sources = this.memberCounts\n      .map((_, i) => i)\n      .filter((i) => this.memberCounts[i] > 0);\n\n    // find allowed targets group indices with size of all courses less than maxSize\n    targets = this.memberCounts\n      .map((_, i) => i)\n      .filter((slice) => {\n        return this.courseIndices.every(\n          (courseIdx) => courseSizes[courseIdx][slice] < maxSizes[courseIdx]\n        );\n      });\n\n    // fast exit if no move possible\n    if (\n      sources.length === 0 ||\n      targets.length === 0 ||\n      (sources.length === 1 &&\n        targets.length === 1 &&\n        sources[0] === targets[0])\n    ) {\n      return;\n    }\n\n    // calculate expected changes of contacts\n    sourceAdvantages = sources.map((i) => this.advantageOnRemoveFrom(i));\n    targetPenaltys = targets.map((i) => this.penaltyOnAddTo(i));\n\n    // find valid moves\n    sources.forEach((from, fromIdx) => {\n      targets.forEach((to, toIdx) => {\n        if (\n          from !== to &&\n          sourceAdvantages[fromIdx] - targetPenaltys[toIdx] > 0\n        ) {\n          resultList.push(\n            new Move(\n              this.getIndex(),\n              from,\n              to,\n              sourceAdvantages[fromIdx] - targetPenaltys[toIdx]\n            )\n          );\n        }\n      });\n    });\n  }\n\n  /**\n   * calculate the shrink in contacts if removing one pupil from slice\n   * @param slice index of slice to remove pupil from\n   */\n  private advantageOnRemoveFrom(slice: number): number {\n    // change in own combi caused by members and size change\n    var res = this.memberCounts[slice] + this.combiSizes[slice] - 2;\n    // in connected combis only the size changes by one\n    return this.connectedDistris.reduce(\n      (sum, other) => sum + other.memberCounts[slice],\n      res\n    );\n  }\n\n  /**\n   * calculate the growth in contacts if adding one pupil to slice\n   * @param slice index of slice to remove pupil from\n   */\n  private penaltyOnAddTo(slice: number): number {\n    // change in own combi caused by members and size change\n    var res = this.memberCounts[slice] + this.combiSizes[slice];\n    // in connected combis only the size changes by one\n    return this.connectedDistris.reduce(\n      (sum, other) => sum + other.memberCounts[slice],\n      res\n    );\n  }\n\n  public doMove(move: Move) {\n    this.removeMemberFromSlice(1, move.from);\n    this.addMemberToSlice(1, move.to);\n  }\n\n  public addMemberToSlice(count: number, slice: number) {\n    this.memberCounts[slice] += count;\n    this.combiSizes[slice] += count;\n    this.connectedDistris.forEach((dist) => (dist.combiSizes[slice] += count));\n    var cs = this.slicer.getCourseSizes();\n    this.courseIndices.forEach((i) => (cs[i][slice] += count));\n  }\n\n  public removeMemberFromSlice(count: number, slice: number) {\n    this.memberCounts[slice] -= count;\n    this.combiSizes[slice] -= count;\n    this.connectedDistris.forEach((dist) => (dist.combiSizes[slice] -= count));\n    var cs = this.slicer.getCourseSizes();\n    this.courseIndices.forEach((i) => (cs[i][slice] -= count));\n  }\n\n  /*\n   *  output support\n   */\n  public asLO() {\n    var lo: any = this.combi.asLO();\n    for (let i = 0; i < this.size; i++) {\n      lo['count-' + (i + 1)] = this.memberCounts[i];\n      lo['combiSize-' + (i + 1)] = this.combiSizes[i];\n      lo['contacts-' + (i + 1)] = this.getContacts(i);\n    }\n    return lo;\n  }\n\n  public static loCols(blockCount: number, groupCount: number) {\n    var res = CourseCombination.loCols(blockCount);\n    for (let i = 1; i <= groupCount; i ++) {\n      res.push(new NumberCol(`count-${i}`, `G.${i} # Schüler`, `Anzahl Schüler mit dieser\\nKursbelegung in Gruppe ${i}`));\n      res.push(new NumberCol(`combiSize-${i}`, `G.${i} Größe`, `Anzahl Schüler in allen Kursen\\ndieser Kombination in Gruppe ${i}`));\n      res.push(new NumberCol(`contacts-${i}`, `G.${i} # Kont.`, `Anzahl Kontaktpaare in dieser\\nKomination in Gruppe ${i}`));\n   }\n\n    return res;\n  }\n\n  public setPupilsGroups(pupilsTable: any[]) {\n    var pos = 0;\n    this.memberCounts.forEach((count, i) => {\n      var max = pos + count;\n      while (pos < max) {\n        pupilsTable[this.combi.getMember(pos).getIndex()].group = i + 1;\n        pos++;\n      }\n    });\n  }\n}\n","import { LevelSlicer } from \"./LevelSlicer\";\nimport { Move } from \"./Move\";\n\nexport class ModeSwitchMove extends Move {\n\n  constructor() {\n    super(-1, -1 , -1 , 0);\n  }\n\n  // revert this move\n  public revert(slicer: LevelSlicer) {\n    slicer.revertModeSwitch();\n  }\n\n}","import { LevelSlicer } from \"./LevelSlicer\";\nimport { Move } from \"./Move\";\n\nexport class FinishMove extends Move {\n\n  constructor() {\n    super(-1, -1 , -1 , 0);\n  }\n\n  // revert this move\n  public revert(slicer: LevelSlicer) {\n    slicer.revertFinish();\n  }\n\n}","import { GradeLevel } from '../GradeLevel';\nimport { CombiDistribution } from './CombiDistribution';\nimport { Move } from './Move';\nimport ResultProvider from '../ResultProvider';\nimport { ModeSwitchMove } from './ModeSwitchMove';\nimport { FinishMove } from './FinishMove';\nimport { NumberCol } from '../../modules/result/NumberCol';\n\nexport class LevelSlicer implements ResultProvider {\n  readonly size: number;\n  readonly level: GradeLevel;\n  readonly distributions: CombiDistribution[];\n  readonly courseSizes: number[][];\n  readonly maxSizes: number[];\n  private cfgString: string;\n  readonly moveRandom: boolean;\n  private reduceGroups: boolean = false;\n  private finished: boolean = false;\n  private moveList: Move[];\n  private moveTolerance: number;\n  private moveSlowly: boolean;\n  private oversizeWeighther: (cur: number, max: number) => number;\n\n  public static solve(\n    aSize: number,\n    aLevel: GradeLevel,\n    initializer: string,\n    move: string,\n    speed: string,\n    moveTolerance: number,\n    groupRestrict: string,\n    groupTolerance: number,\n    sizeWeighting: string,\n    iterations: number\n  ): LevelSlicer {\n    var best: LevelSlicer;\n    var contacts: number;\n    var count: number = 0;\n\n    best = new LevelSlicer(\n      aSize,\n      aLevel,\n      initializer,\n      move,\n      speed,\n      moveTolerance,\n      groupRestrict,\n      groupTolerance,\n      sizeWeighting\n    );\n    best.optimize();\n    contacts = best.getContacts();\n    do {\n      var current: LevelSlicer;\n      var currentContacts: number;\n\n      count++;\n      current = new LevelSlicer(\n        aSize,\n        aLevel,\n        initializer,\n        move,\n        speed,\n        moveTolerance,\n        groupRestrict,\n        groupTolerance,\n        sizeWeighting\n      );\n      current.optimize();\n      currentContacts = current.getContacts();\n      if (currentContacts < contacts) {\n        best = current;\n        contacts = currentContacts;\n      }\n    } while (count < iterations);\n    return best;\n  }\n\n  constructor(\n    aSize: number,\n    aLevel: GradeLevel,\n    initializer: string,\n    move: string,\n    speed: string,\n    moveTolerance: number,\n    groupRestrict: string,\n    groupTolerance: number,\n    sizeWeighting: string\n  ) {\n    if (aSize < 2) {\n      throw new Error('size must be at least 2');\n    }\n    // init fields\n    this.size = aSize;\n    this.level = aLevel;\n    this.courseSizes = new Array(this.level.getCourses().length);\n    for (let i = 0; i < this.courseSizes.length; i++) {\n      this.courseSizes[i] = new Array(this.size).fill(0);\n    }\n    this.distributions = [];\n    this.distributions = this.level\n      .getCombinations()\n      .map((combi) => new CombiDistribution(combi, this));\n    this.distributions.forEach((dist) =>\n      dist.fillConnected(this.distributions)\n    );\n    // init groups\n    this.cfgString = 'Groups: ' + this.size + '; ';\n    this.cfgString += 'Initial Groups: ' + initializer + '; ';\n    if (initializer === 'random') {\n      this.initRandomlyDistributed();\n    } else {\n      this.initAllIntoFirstSlice();\n    }\n    // init max sizes\n    this.reduceGroups = true;\n    this.cfgString = this.cfgString + 'Group size: ';\n    this.maxSizes = new Array(this.courseSizes.length);\n    if (groupRestrict === 'max') {\n      var max = this.level\n        .getCourses()\n        .reduce((res, course) => Math.max(res, course.getMemberCount()), 0);\n      max = Math.ceil(max / this.size) + groupTolerance;\n      this.maxSizes.fill(max);\n      this.cfgString += 'max ' + max + '; ';\n    } else if (groupRestrict === 'each') {\n      this.level.getCourses().forEach((course) => {\n        this.maxSizes[course.getIndex()] =\n          Math.ceil(course.getMemberCount() / this.size) + groupTolerance;\n      });\n      this.cfgString += 'by course with tolerance ' + groupTolerance + '; ';\n    } else {\n      this.reduceGroups = false;\n      this.maxSizes.fill(this.level.getMembers().length);\n      this.cfgString += 'unrestricted; ';\n    }\n    switch (sizeWeighting) {\n      case 'prefSmall':\n        this.oversizeWeighther = this.prefSmallOversizeWeighther;\n        break;\n      case 'prefBig':\n        this.oversizeWeighther = this.prefBigOversizeWeighther;\n        break;\n      case 'squared':\n        this.oversizeWeighther = this.squaredOversizeWeighther;\n        break;\n      case 'equal':\n      default: \n        this.oversizeWeighther = this.equalOversizeWeighther;\n    }\n    // init move policy\n    this.moveList = [];\n    this.moveSlowly = 'slow' === speed;\n    this.cfgString += this.moveSlowly\n      ? 'Move speed: slow; '\n      : 'Move speed: fast; ';\n    this.moveRandom = 'random' === move;\n    this.cfgString += this.moveRandom\n      ? 'Move: select random; '\n      : 'Move: use first best; ';\n    this.moveTolerance = moveTolerance / 100;\n    this.cfgString += 'Move tolerance: ' + moveTolerance + '; ';\n  }\n\n  private initAllIntoFirstSlice() {\n    this.distributions.forEach((dist) => {\n      dist.addMemberToSlice(dist.getCombination().getMemberCount(), 0);\n    });\n  }\n\n  private initRandomlyDistributed() {\n    var indices = this.level\n      .getMembers()\n      .map((pupil) => pupil.getCourseCombination().getIndex());\n    var slice = 0;\n    while (indices.length > 0) {\n      var pos = Math.floor(Math.random() * indices.length);\n      this.distributions[indices[pos]].addMemberToSlice(1, slice);\n      indices.splice(pos, 1);\n      slice = (slice + 1) % this.size;\n    }\n  }\n\n  private equalOversizeWeighther(cur: number, max: number): number {\n    return cur <= max ? 0 : cur - max;\n  }\n\n  private prefSmallOversizeWeighther(cur: number, max: number): number {\n    return cur <= max ? 0 : (cur - max) / max;\n  }\n\n  private prefBigOversizeWeighther(cur: number, max: number): number {\n    return cur <= max ? 0 : (cur - max) * max;\n  }\n\n  private squaredOversizeWeighther(cur: number, max: number): number {\n    return cur <= max ? 0 : (cur - max) ** 2;\n  }\n\n  // calc weight of growth by one\n  public weightSizeGrowth(cur: number, max: number): number {\n    return this.oversizeWeighther(cur + 1, max) - this.oversizeWeighther(cur, max);\n  }\n\n  public optimize() {\n    while (!this.finished) {\n      this.doMove();\n    }\n  }\n\n  /**\n   * optimization workhouse\n   */\n  public doMove() {\n    var candidateMoves: Move[];\n\n    // calculate candidates\n    candidateMoves = [];\n    if (this.reduceGroups) {\n      this.distributions.forEach((dist) => {\n        dist.findGroupSizeMoves(candidateMoves);\n      });\n      if (candidateMoves.length === 0) {\n        this.reduceGroups = false;\n        this.moveList.push(new ModeSwitchMove());\n        return;\n      }\n    } else {\n      this.distributions.forEach((dist) => {\n        dist.findContactMoves(candidateMoves);\n      });\n      if (candidateMoves.length === 0) {\n        this.finished = true;\n        this.moveList.push(new FinishMove());\n        return;\n      }\n    }\n\n    // sort candidates\n    candidateMoves.sort((a, b) => b.progress - a.progress);\n    // select candidate\n    var move;\n    if (this.reduceGroups) {\n      // always use best move\n      move = candidateMoves[0];\n    } else {\n      var idx: number; \n      if (this.moveRandom) {\n        idx = Math.floor(\n          Math.random() * candidateMoves.length * this.moveTolerance\n        );\n      } else {\n        idx = 0;\n      }\n      // take first or last move\n      if (this.moveSlowly) {\n        move = candidateMoves[candidateMoves.length - 1 - idx];\n      } else {\n        move = candidateMoves[idx];\n      }\n    }\n    \n    // execute move\n    this.distributions[move.combination].doMove(move);\n    this.moveList.push(move);\n    // console.log(\"MOVED: \" +JSON.stringify(move));\n  }\n\n  public undoLastMove() {\n    if (this.moveList.length > 0) {\n      const move = this.moveList.pop();\n      move!.revert(this);\n    }\n  }\n\n  public revertMove(move: Move) {\n    var revMove = new Move(move.combination, move.to, move.from, - move.progress);\n    this.distributions[revMove.combination].doMove(revMove);\n  }\n\n  public revertFinish() {\n    this.finished = false;\n  }\n\n  public revertModeSwitch() {\n    this.reduceGroups = true;\n  }\n\n  public getSize() {\n    return this.size;\n  }\n\n  public getCourseSizes() {\n    return this.courseSizes;\n  }\n\n  public getMaxSizes() {\n    return this.maxSizes;\n  }\n\n  public getMoveCount() {\n    return this.moveList.length;\n  }\n\n  public isFinished() {\n    return this.finished;\n  }\n\n  public getOversizeSum() {\n    return this.courseSizes.reduce((sum, groupSizes, i) => {\n      return groupSizes.reduce(\n        (res, siz) => res + Math.max(0, siz - this.maxSizes[i]),\n        sum\n      );\n    }, 0);\n  }\n\n  public getOversizeMax() {\n    return this.courseSizes.reduce((max, groupSizes, i) => {\n      return groupSizes.reduce(\n        (res, siz) => Math.max(res, siz - this.maxSizes[i]),\n        max\n      );\n    }, 0);\n  }\n\n  public getContacts(slice?: number): number {\n    return this.distributions.reduce(\n      (sum, dist) => sum + dist.getContacts(slice),\n      0\n    );\n  }\n\n  public getMemberCount(slice?: number): number {\n    return this.distributions.reduce(\n      (sum, dist) => sum + dist.getMemberCount(slice),\n      0\n    );\n  }\n\n  /*\n   *  output support\n   */\n  public configString() {\n    return this.cfgString;\n  }\n\n  public getLevel() {\n    return this.level;\n  }\n\n  public statusString() {\n    return `Groups: ${this.size}; Contacts: ${this.getContacts()}; Moves: ${\n      this.moveList.length\n    }; Finished: ${this.finished}; Fixing sizes: ${\n      this.reduceGroups\n    }; Oversize sum: ${this.getOversizeSum()}; Oversize max: ${this.getOversizeMax()}`;\n  }\n\n  public print() {\n    console.log('PUPILS');\n    console.table(this.pupilTable());\n    console.log('DISTRIBUTIONS');\n    console.table(this.combiTable());\n    console.log('COURSES');\n    console.table(this.courseTable());\n    console.log('CONTACTS : ' + this.getContacts());\n  }\n\n  public courseTable() {\n    var res: Object[] = [];\n    this.level.getCourses().forEach((course) => {\n      var lo = course.asLO();\n      for (let i = 0; i < this.size; i++) {\n        lo['group-' + (i + 1)] = this.courseSizes[course.getIndex()][i];\n      }\n      res.push(lo);\n    });\n    return res;\n  }\n\n  public courseCols() {\n    var res = this.level.courseCols();\n    for (let i = 1; i <= this.size; i ++) {\n      res.push(new NumberCol(`group-${i}`, `G.${i} # Schüler`, `Anzahl Schüler des\\nKurs in Gruppe ${i}`));\n   }\n    return res;\n  }\n\n  public combiTable() {\n    var res: Object[] = [];\n    this.distributions.forEach((dist) => res.push(dist.asLO()));\n    // var sum: any = { no: 'Summe' };\n    // for (let i = 0; i < this.size; i++) {\n    //   sum['Count-' + i] = this.getMemberCount(i);\n    //   sum['CombiSize-' + i] = '--';\n    //   sum['Contacts-' + i] = this.getContacts(i);\n    // }\n    // res.push(sum);\n    return res;\n  }\n\n  public combiCols() {\n    return CombiDistribution.loCols(this.level.getBlocks().length , this.size);\n  }\n\n  public pupilTable() {\n    var table: any[] = this.level.pupilTable();\n    this.distributions.forEach((dist) => dist.setPupilsGroups(table));\n    return table;\n  }\n\n  public pupilCols() {\n    return this.level.pupilCols();\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport { Column } from './Column';\n\nconst ResultTable: React.FC<{\n  list: any[];\n  columns: Column<any>[]\n  title: String;\n  selections: number[];\n  setSelection: any;\n}> = ({ list, columns, title, selections, setSelection }) => {\n  const selectedRows = selections;\n  const updateSelectedRow = setSelection;\n  const [sortColumn, setSortColumn] = useState<number>(0);\n  const [sortedIndices, setSortedIndices] = useState<number[]>(list.map((_, i) => i));\n \n  useEffect(()=>setSortedIndices(list.map((_, i) => i)),[list])\n  if (!list || list.length === 0) {\n    return null;\n  }\n\n  function doSort(colIdx: number) {\n    var newOrder: number[];\n    var col : Column<any>\n\n    // ATTENTION: colIdx is 1-based !\n    if ((-colIdx) === sortColumn) {\n      setSortColumn(0);\n      // unsort\n      setSortedIndices(list.map((_, i) => i))\n    } else if (colIdx === sortColumn) {\n      setSortColumn(-colIdx);\n      // sort descending\n      newOrder = sortedIndices.map( i => i);\n      col = columns[colIdx - 1];\n      newOrder.sort((a,b) => col.compare(list[b], list[a]))\n      setSortedIndices(newOrder);\n    } else {\n      setSortColumn(colIdx);\n      // sort ascending\n      newOrder = sortedIndices.map( i => i);\n      col = columns[colIdx - 1];\n      newOrder.sort((a,b) => col.compare(list[a], list[b]))\n      setSortedIndices(newOrder);\n    }\n\n  }\n\n  var csv = '';\n  csv = columns.reduce((res, col) => res + col.title + ';', csv) + '\\r\\n';\n  csv = list.reduce((resO, obj) => {\n    return columns.reduce((res, col) => res + col.value(obj) + ';', resO) + '\\r\\n';\n  }, csv);\n  var dataURL = 'data:text/csv;charset=UTF-8,' + encodeURIComponent(csv);\n\n\n  return (\n    <div>\n      <div>\n        <h5 style={{ display: 'inline' }}>{title}</h5>\n        <a\n          className=\"btn btn-primary float-right\"\n          href={dataURL}\n          download=\"result.csv\"\n        >\n          CSV herunterladen\n        </a>\n      </div>\n      <div className=\"table-responsive\">\n        <table className=\"table table-bordered table-sm\">\n          <thead className=\"thead-light\">\n            <tr>\n              {columns.map((col, rawIdx) => {\n                const  idx = rawIdx + 1;\n                return <th \n                  key={`colhead_${idx}`}\n                  onClick={ (e) => {\n                    e.preventDefault();\n                    doSort(idx);\n                  }}>\n                  <div data-toggle=\"tooltip\" data-placement=\"bottom\" title={col.tip}\n                       className={'sortable ' + (idx === sortColumn ? 'sortasc' : (-idx) === sortColumn ? 'sortdesc' : '')}>\n                    {col.title}\n                  </div>\n                </th>\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {sortedIndices.map((i, rowi) => {\n              var obj = list[i];\n              return (\n                <tr\n                  className={selectedRows?.includes(i) ? 'table-info' : ''}\n                  key={`row_${rowi}`}\n                  onClick={(ev) => updateSelectedRow(i)}\n                >\n                  {columns.map((col, coli) => (\n                    <td key={`field_${rowi}_${coli}`}>{col.value(obj)}</td>\n                  ))}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default ResultTable;\n","import { useEffect, useState } from 'react';\nimport ResultProvider from '../../domain/ResultProvider';\nimport ResultTable from './ResultTable';\n\nconst Result: React.FC<{ holder: ResultProvider[] }> = ({ holder }) => {\n  const [selPupils, setSelPupils] = useState<number[]>([]);\n  const [selCourses, setSelCourses] = useState<number[]>([]);\n  const [selCombis, setSelCombis] = useState<number[]>([]);\n\n   useEffect(() => {\n      if (selPupils.length) {\n        setSelPupils([]);\n      }\n      if (selCourses.length) {\n        setSelCourses([])\n      }\n      if (selCombis.length) {\n        setSelCombis([])\n      }\n      // eslint-disable-next-line\n  }, [holder])\n\n  if (holder.length === 0) {\n    return null;\n  }\n\n  const provider = holder[0];\n\n  const updatePupilSelection = (row: number) => {\n    setSelPupils([row]);\n    var combi = provider.getLevel().getMembers()[row].getCourseCombination();\n    setSelCombis([combi.getIndex()]);\n    setSelCourses(\n      combi\n        .getCourses()\n        .filter((c) => c != null)\n        .map((c) => c.getIndex())\n    );\n  };\n\n  function updateCourseSelection(row: number) {\n    setSelCourses([row]);\n    var course = provider.getLevel().getCourses()[row];\n    setSelCombis(course.getCombinations().map((c) => c.getIndex()));\n    setSelPupils(course.getMembers().map((p) => p.getIndex()));\n  }\n\n  function updateCombiSelection(row: number) {\n    setSelCombis([row]);\n    var allCombis = provider.getLevel().getCombinations();\n    if (row >= allCombis.length) {\n      setSelPupils([]);\n      setSelCourses([]);\n    } else {\n      var combi = allCombis[row];\n      setSelPupils(combi.getMembers().map((p) => p.getIndex()));\n      setSelCourses(\n        combi\n          .getCourses()\n          .filter((c) => c != null)\n          .map((c) => c.getIndex())\n      );\n    }\n  }\n\n  return (\n    <>\n      <ResultTable\n        list={provider.pupilTable()}\n        columns={provider.pupilCols()}\n        title=\"Schüler\"\n        selections={selPupils}\n        setSelection={updatePupilSelection}\n      ></ResultTable>\n      <ResultTable\n        list={provider.courseTable()}\n        columns={provider.courseCols()}\n        title=\"Kurse\"\n        selections={selCourses}\n        setSelection={updateCourseSelection}\n      ></ResultTable>\n      <ResultTable\n        list={provider.combiTable()}\n        columns={provider.combiCols()}\n        title=\"Kursbelegung\"\n        selections={selCombis}\n        setSelection={updateCombiSelection}\n      ></ResultTable>\n    </>\n  );\n};\n\nexport default Result;\n","import { GradeLevel } from \"../domain/GradeLevel\";\n\nconst LevelDisplay: React.FC<{ level?: GradeLevel }> = ({ level }) => {\n\n    if (!level) {\n      return (\n        <ul className=\"list-group list-group-horizontal-md mt-2\">\n          <li className=\"list-group-item px-2 py-1\">Keine Daten geladen</li>\n        </ul>\n      );\n    }\n\n    return (\n      <ul className=\"list-group list-group-horizontal-lg mt-2\">\n        <li className=\"list-group-item flex-fill d-flex justify-content-between align-items-center px-2 py-1\">Daten geladen:</li>\n        <li className=\"list-group-item flex-fill d-flex justify-content-between align-items-center px-2 py-1\">\n          Schüler\n          <span className=\"badge badge-primary badge-pill\">{level.getMembers().length}</span>\n        </li>\n        <li className=\"list-group-item flex-fill d-flex justify-content-between align-items-center px-2 py-1\">\n          Kurse\n          <span className=\"badge badge-primary badge-pill\">{level.getCourses().length}</span>\n        </li>\n        <li className=\"list-group-item flex-fill d-flex justify-content-between align-items-center px-2 py-1\">\n          Blöcke\n          <span className=\"badge badge-primary badge-pill\">{level.getBlocks().length}</span>\n        </li>\n        <li className=\"list-group-item flex-fill d-flex justify-content-between align-items-center px-2 py-1\">\n          Kurs-Kombinationen\n    <span className=\"badge badge-primary badge-pill\">{level.getCombinations().length}</span>\n        </li>\n        <li className=\"list-group-item flex-fill d-flex justify-content-between align-items-center px-2 py-1\">\n          Kontakte\n          <span className=\"badge badge-primary badge-pill\">{level.getContacts()}</span>\n        </li>\n      </ul>\n)\n\n  }\n\nexport default LevelDisplay;","import { LevelSlicer } from \"../domain/solve/LevelSlicer\";\n\nexport const SolutionDisplay: React.FC<{ slicer?: LevelSlicer }> = ({ slicer }) => {\n\n    if (!slicer) {\n      return (\n        <ul className=\"list-group list-group-horizontal-md mt-2\">\n          <li className=\"list-group-item px-2 py-1\">Keine Lösung berechnet</li>\n        </ul>\n      );\n    }\n\n    return (\n      <ul className=\"list-group list-group-horizontal-lg mt-2\">\n        <li className=\"list-group-item flex-fill d-flex justify-content-between align-items-center px-2 py-1\">berechnete Lösung:</li>\n        <li className=\"list-group-item flex-fill d-flex justify-content-between align-items-center px-2 py-1\">\n          Gruppen\n          <span className=\"badge badge-primary badge-pill\">{slicer.getSize()}</span>\n        </li>\n        <li className=\"list-group-item flex-fill d-flex justify-content-between align-items-center px-2 py-1\">\n          Gruppen Übergröße (max/sum)\n          <span className=\"badge badge-primary badge-pill\">{slicer.getOversizeMax()}/{slicer.getOversizeSum()}</span> \n        </li>\n        <li className=\"list-group-item flex-fill d-flex justify-content-between align-items-center px-2 py-1\">\n          Schritte\n          <span className=\"badge badge-primary badge-pill\">{slicer.getMoveCount()}</span>\n        </li>\n        <li className=\"list-group-item flex-fill d-flex justify-content-between align-items-center px-2 py-1\">\n          Berechnung abgeschlossen\n          <span className=\"badge badge-primary badge-pill\">{slicer.isFinished() ? 'Ja': 'Nein'}</span>\n        </li>\n        <li className=\"list-group-item flex-fill d-flex justify-content-between align-items-center px-2 py-1\">\n          Kontakte\n          <span className=\"badge badge-primary badge-pill\">{slicer.getContacts()}</span>\n        </li>\n      </ul>\n)\n\n  }\n","import React, { useState } from 'react';\nimport CSVReader from 'react-csv-reader';\nimport { GradeLevel } from '../domain/GradeLevel';\nimport { LevelSlicer } from '../domain/solve/LevelSlicer';\nimport ResultProvider from '../domain/ResultProvider';\nimport Result from './result/Result';\nimport LevelDisplay from './LevelDisplay';\nimport Papa from 'papaparse';\nimport { SolutionDisplay } from './SolutionDisplay';\n\ninterface Props {}\n\nconst Input: React.FC<Props> = () => {\n  const [gradeLevel, setGradeLevel] = useState<GradeLevel>();\n  const [levelSlicer, setLevelSlicer] = useState<LevelSlicer>();\n  const [sliceCount, setSliceCount] = useState(2);\n  const [initializer, setInitializer] = useState('first');\n  const [groupRestrict, setGroupRestrict] = useState('each');\n  const [groupTolerance, setGroupTolerance] = useState(1);\n  const [move, setMove] = useState('random');\n  const [speed, setSpeed] = useState('slow');\n  const [relMoves, setRelMoves] = useState(30);\n  const [iterations, setIterations] = useState(200);\n  const [result, setResult] = useState<ResultProvider[]>([]);\n  const [sizeWeighting, setSizeWeighting] = useState('squared')\n  const [calculating, setCalculating] = useState(false);\n\n  function updateResult(provider: ResultProvider) {\n    if (provider) {\n      setResult([provider]);\n    } else {\n      setResult([]);\n    }\n  }\n\n  function loadGradeData(data: string[][]) {\n    const level = new GradeLevel(data);\n    setGradeLevel(level);\n    setLevelSlicer(undefined);\n    updateResult(level);\n  }\n\n  return (\n    <main className=\"container-fluid\">\n      <h3>Eingabe</h3>\n      <div className=\"mb-3\">\n        <label htmlFor=\"csvUpload\" className=\"form-label d-flex justify-content-between\">\n          <span className=\"pt-2 pl-3\" >CSV Datei mit Daten auswählen:</span>\n          <button\n            className=\"btn btn-outline-secondary \"\n            onClick={(e) => {\n              e.preventDefault();\n              if (window.location.protocol.startsWith(\"file\")) {\n                window.alert('Bitte klicken Sie \"Durchsuchen...\" und\\nwählen die Datei \"samples/sample.csv\" aus.');\n              } else {\n                Papa.parse<string[]>('./samples/sample.csv', {\n                  download: true,\n                  complete: (data) => {\n                    loadGradeData(data.data);\n                  }\n                })\n              }\n            }}\n          >\n            Beispiel Daten laden\n          </button>\n        </label>\n        <CSVReader\n          inputId=\"csvUpload\"\n          cssInputClass=\"form-control \"\n          parserOptions={{}}\n          onFileLoaded={(data) => {\n            loadGradeData(data);\n          }}\n        />\n        <LevelDisplay level={gradeLevel}></LevelDisplay>\n      </div>\n\n      <h3>Berechnen</h3>\n      <div className=\"form-row\">\n        <div className=\"form-group col-md-3\">\n          <label htmlFor=\"sliceInput\" className=\"form-label\">\n            Gruppen Anzahl: <b>{sliceCount}</b>\n          </label>\n          <input\n            className=\"form-control-range\"\n            type=\"range\"\n            step=\"1\"\n            id=\"sliceInput\"\n            min=\"2\"\n            max=\"10\"\n            onChange={(e) => setSliceCount(e.target.valueAsNumber)}\n            value={sliceCount}\n          />\n        </div>\n        <div className=\"form-group col-md-3\">\n          <label htmlFor=\"resrictSelect\" className=\"form-label\">\n            Begrenzung Gruppen Größe:\n          </label>\n          <select\n            id=\"resrictSelect\"\n            className=\"form-control\"\n            onChange={(e) => setGroupRestrict(e.target.value)}\n            value={groupRestrict}\n          >\n            <option value=\"none\">Keine Begrenzung</option>\n            <option value=\"max\">anhand größtem Kurs</option>\n            <option value=\"each\">je Kurs</option>\n          </select>\n        </div>\n        <div className=\"form-group col-md-3\">\n          <label htmlFor=\"toleranceInput\" className=\"form-label\">\n            Toleranz Gruppen Größe: <b>{groupTolerance}</b>\n          </label>\n          <input\n            type=\"range\"\n            id=\"toleranceInput\"\n            className=\"form-control\"\n            min=\"0\"\n            max=\"10\"\n            step=\"1\"\n            onChange={(e) => setGroupTolerance(e.target.valueAsNumber)}\n            value={groupTolerance}\n          />\n        </div>\n        <div className=\"form-group col-md-3\">\n          <label htmlFor=\"sizeWeightingSelect\" className=\"form-label\">\n            Gewichtung:\n          </label>\n          <select\n            id=\"sizeWeightingSelect\"\n            className=\"form-control\"\n            onChange={(e) => setSizeWeighting(e.target.value)}\n            value={sizeWeighting}\n          >\n            <option value=\"equal\">gleichberechtigt</option>\n            <option value=\"prefSmall\">zuerst kleine Gruppen</option>\n            <option value=\"prefBig\">zuerst große Gruppen</option>\n            <option value=\"squared\">zuerst größte Überschreitung</option>\n          </select>\n        </div>\n      </div>\n\n      <details>\n        <summary>\n          <h5 style={{ display: 'inline' }}>Berechnungs Optionen</h5>\n        </summary>\n          <div className=\"form-row\">\n            <div className=\"form-group col-md-2\">\n              <label htmlFor=\"initializerSelect\" className=\"form-label\">\n                Initialisierung:\n              </label>\n              <select\n                id=\"initializerSelect\"\n                className=\"form-control\"\n                onChange={(e) => setInitializer(e.target.value)}\n                value={initializer}\n              >\n                <option value=\"first\">Alle in erster Gruppe</option>\n                <option value=\"random\">zufällig verteilt</option>\n              </select>\n            </div>\n            <div className=\"form-group col-md-2\">\n              <label htmlFor=\"speedSelect\" className=\"form-label\">\n                Optimierung:\n              </label>\n              <select\n                id=\"speedSelect\"\n                onChange={(e) => setSpeed(e.target.value)}\n                className=\"form-control\"\n                value={speed}\n              >\n                <option value=\"slow\">Langsam</option>\n                <option value=\"fast\">Schnell</option>\n              </select>\n            </div>\n            <div className=\"form-group col-md-2\">\n              <label htmlFor=\"moveSelect\" className=\"form-label\">\n                Schrittauswahl:\n              </label>\n              <select\n                id=\"moveSelect\"\n                className=\"form-control\"\n                onChange={(e) => setMove(e.target.value)}\n                value={move}\n              >\n                <option value=\"first\">Deterministisch</option>\n                <option value=\"random\">Zufällig</option>\n              </select>\n            </div>\n            <div className=\"form-group col-md-2\">\n              <label htmlFor=\"relmovesInput\" className=\"form-label\">\n                Schrittauswahl aus: <b>{relMoves} % </b>\n              </label>\n              <input\n                type=\"range\"\n                id=\"relmovesInput\"\n                className=\"form-control-range\"\n                step=\"10\"\n                min=\"0\"\n                max=\"100\"\n                onChange={(e) => setRelMoves(e.target.valueAsNumber)}\n                value={relMoves}\n              />\n            </div>\n            <div className=\"form-group col-md-2\">\n              <label htmlFor=\"iterInput\" className=\"form-label\">\n                Durchläufe: <b>{iterations}</b>\n              </label>\n              <input\n                type=\"range\"\n                id=\"iterInput\"\n                className=\"form-control-range\"\n                step=\"50\"\n                min=\"50\"\n                max=\"1000\"\n                onChange={(e) => setIterations(e.target.valueAsNumber)}\n                value={iterations}\n              />\n            </div>\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"form-group col-md-2\">\n              <button\n                className=\"form-control btn btn-outline-secondary\"\n                disabled={!gradeLevel}\n                onClick={(e) => {\n                  e.preventDefault();\n                  if (gradeLevel) {\n                    var slicer = new LevelSlicer(\n                      sliceCount,\n                      gradeLevel,\n                      initializer,\n                      move,\n                      speed,\n                      relMoves,\n                      groupRestrict,\n                      groupTolerance,\n                      sizeWeighting\n                    );\n                    setLevelSlicer(slicer);\n                    updateResult(slicer);\n                  }\n                }}\n              >\n                Neue Teilung Erzeugen\n              </button>\n            </div>\n            <div className=\"form-group col-md-2\">\n              <button\n                className=\"form-control btn btn-outline-secondary\"\n                disabled={!levelSlicer}\n                onClick={(e) => {\n                  e.preventDefault();\n                  if (levelSlicer) {\n                    levelSlicer.optimize();\n                    updateResult(levelSlicer);\n                  }\n                }}\n              >\n                Teilung Optimieren\n              </button>\n            </div>\n            <div className=\"form-group col-md-2\">\n              <button\n                className=\"form-control btn btn-outline-secondary\"\n                disabled={!levelSlicer}\n                onClick={(e) => {\n                  e.preventDefault();\n                  if (levelSlicer) {\n                    levelSlicer.doMove();\n                    updateResult(levelSlicer);\n                  }\n                }}\n              >\n                Einzelschritt ausführen\n              </button>\n            </div>\n            <div className=\"form-group col-md-2\">\n              <button\n                className=\"form-control btn btn-outline-secondary\"\n                disabled = {!levelSlicer}\n                onClick={(e) => {\n                  e.preventDefault();\n                  if (levelSlicer) {\n                    levelSlicer.undoLastMove();\n                    updateResult(levelSlicer);\n                  }\n                }}\n              >\n                letzten Schritt zurück\n              </button>\n            </div>\n          </div>\n      </details>\n      <div className=\"mt-3\">\n        <div className=\"form-group row container-fluid\">\n          <button\n            className=\"form-control col-sm-2 btn btn-primary\"\n            disabled={!gradeLevel}\n            onClick={(e) => {\n              e.preventDefault();\n              if (gradeLevel) {\n                setCalculating(true);\n                setTimeout(() => {\n                  var slicer = LevelSlicer.solve(\n                    sliceCount,\n                    gradeLevel,\n                    initializer,\n                    move,\n                    speed,\n                    relMoves,\n                    groupRestrict,\n                    groupTolerance,\n                    sizeWeighting,\n                    iterations\n                  );\n                  setLevelSlicer(slicer);\n                  setCalculating(false);\n                  updateResult(slicer);\n                }, 0);\n              }\n            }}\n          >\n            {calculating ? (\n              <span\n                className='spinner-border spinner-border-sm bi mx-1'\n                role='status'\n                aria-hidden='true'\n              ></span>\n            ): ''}\n            Lösung berechnen\n          </button>\n        </div>\n        <SolutionDisplay slicer={levelSlicer}></SolutionDisplay>\n      </div>\n\n      <h3>Ausgabe</h3>\n      <Result holder={result} />\n    </main>\n  );\n};\nexport default Input;\n","import React from 'react';\n\ninterface Props {}\n\nconst HelpDialog: React.FC<Props> = () => (\n  <div>\n    <button\n      type=\"button\"\n      className=\"btn btn-primary\"\n      data-toggle=\"modal\"\n      data-target=\"#helpModalScrollable\"\n    >\n      Hilfe\n    </button>\n\n    <div\n      className=\"modal fade\"\n      id=\"helpModalScrollable\"\n      role=\"dialog\"\n      aria-labelledby=\"helpModalScrollableTitle\"\n      aria-hidden=\"true\"\n    >\n      <div\n        className=\"modal-dialog modal-dialog-scrollable modal-lg\"\n        role=\"document\"\n      >\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\" id=\"helpModalScrollableTitle\">\n              Hilfe\n            </h5>\n            <button\n              type=\"button\"\n              className=\"close\"\n              data-dismiss=\"modal\"\n              aria-label=\"Close\"\n            >\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div className=\"modal-body\">\n            <h4>Überblick</h4>\n            <p>\n              Dieses Werkzeug dient zur Aufteilung einer Klassenstufe in mehrere\n              Gruppen, die im Wechsel unterrichtet werden. Es berücksichtigt\n              insbesondere Klassenstufen, in denen der Unterricht nicht\n              durchgängig im Klassenverbund durchgeführt wird. Es kann also je\n              Schüler eine individuelle Kursbelegung geben.\n            </p>\n            <p>\n              Lösungen werden heuristisch berechnet. Somit wird nicht unbedingt\n              die optimale Lösung gefunden. Hauptbedingung für eine gute Lösung\n              ist eine möglichst geringe Anzahl an paarweisen Kontakten von\n              Schülern. Ein Kontakt entseht dabei, wenn zwei Schüler gemeinsam\n              in einem Kurs sind. Zusätzlich können Beschränkungen für die\n              resultierende Kursgröße berücksichtigt werden.\n            </p>\n            <p>\n              Dieses Werkzeug nutzt einen Browser als Ausführungsumgebung, arbeitet \n              aber vollständig lokal im Browser. Es überträgt niemals die \n              verarbeiteten Daten per Netzwerk zu anderen Rechnern. <b>Die vertraulichen\n              Daten der Schüler bleiben durchgehend und ausschließlich auf dem lokalen \n              Rechner!</b>\n            </p>\n            <h4>Schnell Einstieg</h4>\n            <p>\n              Grundsätzlich sind folgende Schritte zur Bedienung notwendig:\n            </p>\n            <ul>\n              <li>Mit Schaltfläche <i>Durchsuchen...</i> eine CSV-Datei mit den Schülern und Ihren belegten Kursen laden.</li>\n              <li>Einstellungen zur Anzahl Gruppen und gewünschter Gruppengröße wählen.</li>\n              <li>Schaltfläche <i>Lösung berechnen</i> betätigen.</li>\n              <li>In der <i>Schüler</i> Tabelle Gruppenzuordung ablesen oder Tabelle als CSV-Datei speichern.</li>\n            </ul>\n            <h4>Eingabe Format</h4>\n            <p>\n              Als Eingabe wird eine CSV-Datei erwartet. Die erste Zeile der\n              Datei wird ignoriert (Kopfzeile). Alle weiteren Zeilen entsprechen\n              einem Schüler. Die ersten beiden Werte werden als Vorname und\n              Nachname des Schülers verstanden. Alle weiteren Werte werden als\n              Namen der vom Schüler belegten Kurse interpretiert. Die Kursnamen\n              müssen eindeutig sein, auch in der Schreibweise. Leere Werte in einer Zeile sind\n              zulässig und werden ignoriert.\n            </p>\n            <p>\n              Ein Beispiel kann mit der Schaltfäche <i>Beispiel Datei laden</i> direkt in das \n              Programm geladen werden oder <a href=\"./samples/sample.csv\">hier heruntergeladen werden.</a>\n            </p>\n            <h4>Bedienung</h4>\n            <p>\n              Zunächst ist im Bereich <i>Eingabe</i> eine Datei im erwarteten\n              Format zu laden. Im Bereich <i>Berechnen</i> kann ausgewählt werden,\n              in wieviele Gruppen die Stufe geteilt werden soll. Zusätzlich können \n              Beschränkungen zur resultierenden Kursgröße je Gruppe definiert werden.\n              Bei Bedarf können auch einige Parameter des Algorithmus angepasst \n              werden (Details s.u.) und dann muss die <i>Lösung berechnet</i> werden. \n              Bei der Berechnung wird der Lösungsalgorithmus mehrmals durchlaufen \n              und die beste gefundene Lösung ausgegeben. \n            </p>\n            <h4>Ausgabe</h4>\n            <p>\n              Die Ausgabe der eingelesenen und berechneten Daten erfolgt im\n              unteren Bereich tabellarisch. Wesentliches Ergebnis ist die \n              Spalte <i>Gruppe</i> in der Tabelle der Schüler.\n            </p>\n            <p>\n              <b><i>Hinweis:</i></b> Schüler in mit der selben Kursbelegung (Kombi.) sind gleichwertig.\n              Sollten Schüler aus einer Kursbelegung auf unterschiedliche\n              Gruppen verteilt worden sein, so ist für das Ergebnis irrelevant\n              welcher konkrete Schüler in welcher Gruppe ist. Es kann also\n              innerhalb einer Kursbelegung die Gruppe getauscht werden, so lange die Anzahl\n              der Schüler je Gruppe nicht verändert wird.\n            </p>\n            <p>\n              Es werden drei Tabellen angezeigt, die Schüler,\n              die Kurse und die Kursbelegungen. Nach Erzeugung einer Lösung\n              werden in diesen Tabellen auch Informationen zu den Gruppen\n              dargestellt. Die Tabellen können als CSV-Dateien gesichert werden. \n            </p>\n            <p>\n              Zur genaueren Inspektion der Daten kann in jeder Tabelle eine\n              Zeile durch Mausklick selektiert werden. In den anderen beiden\n              Tabellen werden dann die korrespondierenden Zeilen hervorgehoben. \n              Durch Mausklick auf den Titel eier Tabellenspalte kann die Tabelle\n              nach der Spalte sortiert werden.\n            </p>\n            <h5>Die Schüler Tabelle enthält folgende Spalten:</h5>\n            <dl>\n              <dt>Nr.</dt>\n              <dd>Nummer des Schülers</dd>\n              <dt>Vorname</dt>\n              <dd>Vorname des Schülers</dd>\n              <dt>Nachname</dt>\n              <dd>Nachname des Schülers</dd>\n              <dt>Kombi.</dt>\n              <dd>\n                Eine numerische ID für die Kombination von belegten Kursen des\n                Schülers. Genau die Schüler mit der identischen Kursbelegung\n                haben hier die selbe ID.\n              </dd>\n              <dt>Gruppe</dt>\n              <dd>\n                ID der Gruppe, der der Schüler bei der Teilung zugeordnet wurde.\n                Die IDs werden numerisch vergeben beginnend mit Eins (1).\n              </dd>\n              <dt>Block &lt;n&gt;</dt>\n              <dd>\n                Name des Kurses den der Schüler im n-ten Block belegt. Die\n                Aufteilung der Kurse auf Blöcke werden automatisch berechnet und\n                müssen somit nicht den echten zeitlichen Blöcken im Stundenplan\n                entsprechen.\n              </dd>\n            </dl>\n            <h4>Konfiguration</h4>\n            <p>\n              Optionen zur <i>Konfiguration</i> können auf Wunsch eingeblendet\n              werden. Die Konfigurationen teilen sich in zwei Bereiche.\n              Unterhalb der Einstellungen existieren Buttons zur\n              Einzeldurchführung der Optimierung und zur schrittweisen\n              Ausführung.\n            </p>\n            <h5>Grupen Einstellungen</h5>\n            <dl>\n              <dt>Anzahl Gruppen</dt>\n              <dd>\n                Legt fest in wieviele Gruppen der Jahrgang aufgeteilt werden\n                soll. Möglich sind 2 bis 10 Gruppen.\n              </dd>\n              <dt>Begrenzung Gruppen Größe.</dt>\n              <dd>\n                Definiert die maximale Gruppen Größe. Optionen sind:\n                <ul>\n                  <li>\n                    <b>Keine Begrenzung</b> - Die Größe der resultierenden Kurse\n                    ist unbegrenzt\n                  </li>\n                  <li>\n                    <b>anhand größtem Kurs</b> - Die Größe der resultierenden\n                    Kurse ist begrenzt durch die Größe des größten Kurses\n                    geteilt durch die Anzahl Gruppen.\n                  </li>\n                  <li>\n                    <b>je Kurs</b> - Die Größe der resultierenden Kurse ist\n                    begrenzt durch die Größe des jeweilgen Kurses geteilt durch\n                    die Anzahl Gruppen.\n                  </li>\n                </ul>\n              </dd>\n              <dt>Toleranz Gruppen Größe</dt>\n              <dd>\n                Bei einer Begrenzung der Gruppen Größe dürfen die Größen der\n                resultierenden Kurse die Begrenzung um diese Anzahl an Schülern\n                übersteigen.\n              </dd>\n              <dt>Gewichtung</dt>\n              <dd>\n                Definiert die Gewichtung der Größenüberschreitung. Der Algorithmus versucht \n                zuerst die Überschreitungen mit höchstem Gewicht zu reduzieren. <br/>\n                Optionen sind:\n                <ul>\n                  <li>\n                    <b>gleichberechtigt</b> - Alle Überscheitungen werden gleichberechtigt behandelt\n                  </li>\n                  <li>\n                    <b>zuerst kleine Gruppen</b> - Überschreitungen von Gruppen mit großer maximal Anzahl \n                    werden bevorzugt ausgeglichen.\n                  </li>\n                  <li>\n                    <b>zuerst große Gruppen</b> - Überschreitungen von Gruppen mit kleiner maximal Anzahl \n                    werden bevorzugt ausgeglichen.\n                  </li>\n                  <li>\n                    <b>zuerst größte Überschreitung</b> - Große Überschreitungen der Zielanzahl\n                    werden bevorzugt ausgeglichen.\n                  </li>\n                </ul>\n              </dd>\n            </dl>\n            <h5>Parameter des Algorithmus</h5>\n            <dl>\n              <dt>Initialisierung</dt>\n              <dd>\n                Legt die initiale Verteilung der Schüler auf Gruppen fest.\n                Entweder werden initial alle Schüler der ersten Gruppe\n                zugeordnet oder die Verteilung erfolgt zufällig gleichverteilt\n                auf alle Gruppen.\n              </dd>\n              <dt>Optimierung</dt>\n              <dd>\n                Legt fest ob der Algorithmus sich bevorzugt langsam oder schnell\n                dem Ziel nähert. Abhängig von dieser Einstellung wird in jeder\n                Runde entweder der Schritt mit der kleinsten oder der größten\n                Verbesserung zur Ausführung gewählt.\n              </dd>\n              <dt>Schrittauswahl</dt>\n              <dd>\n                Bei deterministischer Auswahl wird der erste gefundene Schritt\n                mit der kleinsten / größten Verbesserung ausgeführt. Bei\n                zufälliger Auswahl wird aus den kleinsten / größten Schritten\n                zufällig ein Schritt zur Ausführung ausgewählt.\n              </dd>\n              <dt>Schritt Auswahl aus X %</dt>\n              <dd>\n                Legt fest, wieviel Prozent aller möglichen Schritte bei der\n                zufälligen Auswahl berücksichtigt werden.\n              </dd>\n            </dl>\n            <h4>Algorithmus</h4>\n            <p>\n              Zur Initialisierung des Algorithmus wrden die Schüler auf Gruppen\n              verteilt, entweder zufällig oder alle in die erste Gruppe. Der\n              Optimierungsalgorithmus arbeitet in zwei Phasen. In der ersten\n              Phase wird die Verteilung so angepasst, dass die angestrebten\n              Größen der Teilkurse eingehalten werden. In der zweiten Phase wird\n              die Verteilung so verändert, dass die Anzahl der Kontakte\n              möglichst gering wird.\n            </p>\n            <p>\n              Beide Phasen werden in Schritten durchgeführt. Ein Schritt ist\n              dabei die Verschiebung eines Schülers von einer Gruppe in eine\n              andere Gruppe. Zur Festlegung eines Schrittes werden zunächst alle\n              möglichen Schritte ermittelt, die zur Verbesserung des aktuellen\n              Phasenziels beitragen. Gibt es keine solchen Schritte ist die\n              Phase abgeschlossen. Die gefundenen möglichen Schritte werden\n              gewichtet anhand der Verändeung an der Anzahl der Kontakte, die\n              der jeweilge Schritt bewirken wird. Aus den nach Gewicht\n              sortierten Schritten wird der auszuführende Schritt gemäß den\n              gewählten Optioenn ausgewählt und ausgeführt.\n            </p>\n          </div>\n          <div className=\"modal-footer\">\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-dismiss=\"modal\"\n            >\n              Schliessen\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default HelpDialog;\n","import React from 'react';\nimport HelpDialog from './Navbar/HelpDialog';\n\ninterface Props {}\n\nconst Navbar: React.FC<Props> = () => (\n  <nav id=\"navbar\" className=\"navbar navbar-light bg-light fixed-top\">\n    <div className=\"container-fluid\">\n    <span className=\"navbar-brand mb-0 h1\">Klassenstufen Teiler</span>\n    <HelpDialog />\n    </div>\n  </nav>\n);\n\nexport default Navbar;\n","import React from 'react';\nimport Footer from '../modules/Footer';\nimport Input from '../modules/Input';\nimport Navbar from '../modules/Navbar';\nimport './App.css';\n\nconst App: React.FC<{}> = () => (\n  <>\n    <Navbar />\n    <Input />\n    <Footer />\n  </>\n);\n\nexport default App;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './pages/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}