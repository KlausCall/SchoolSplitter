{"version":3,"sources":["domain/Course.ts","domain/CourseBlock.ts","domain/CourseCombination.ts","domain/Pupil.ts","domain/GradeLevel.ts","domain/Move.ts","domain/CombiDistribution.ts","domain/LevelSlicer.ts","modules/ResultTable.tsx","modules/Input.tsx","modules/Navbar/HelpDialog.tsx","modules/Navbar.tsx","pages/App.tsx","index.tsx"],"names":["Course","theNo","name","no","block","members","combinations","this","member","push","combi","aBlock","Error","length","other","some","p","includes","getIndex","combis","CourseBlock","courseList","self","forEach","c","setBlock","CourseCombination","courses","combiSize","connectedCombis","course","addCombination","otherCombis","Set","allMembers","getCombinations","add","getMembers","pupil","delete","Array","from","size","i","lo","count","contacts","getContacts","crossCombis","getName","Pupil","lastname","firstname","courseCombination","group","getCourses","GradeLevel","data","pupilList","combinationList","blockList","initFromData","pupilCourses","currentCourses","courseMap","Map","slice","fields","courseName","getCourse","addMember","initBlocks","sortCoursesByBlock","initCourseCombinations","orderedList","fill","j","getBlock","combiName","combiMap","nameForCourseList","has","get","set","setCourseCombination","initConnectedCombis","reduce","res","entry","concat","indices","seenPupil","blockCourses","blockNo","sort","a","b","getMemberCount","next","splice","sum","console","log","table","pupilTable","combiTable","courseTable","map","each","asLO","Move","combination","to","progress","CombiDistribution","aCombi","aSlicer","slicer","courseIndices","memberCounts","combiSizes","connectedDistris","getSize","allDistris","getConnectedCombis","connected","undefined","_","minProgress","onlyOversizedCourses","resultList","courseSizes","maxSizes","sources","targets","sourceAdvantages","targetPenaltys","getCourseSizes","getMaxSizes","filter","courseIdx","every","advantageOnRemoveFrom","penaltyOnAddTo","fromIdx","toIdx","move","removeMemberFromSlice","addMemberToSlice","dist","cs","pupilsTable","pos","max","getMember","LevelSlicer","aSize","aLevel","initializer","speed","moveTolerance","groupRestrict","groupTolerance","level","distributions","cfgString","moveRandom","reduceGroups","finished","moveList","moveSlowly","fillConnected","initRandomlyDistributed","initAllIntoFirstSlice","Math","ceil","iterations","best","optimize","statusString","current","currentContacts","getCombination","getCourseCombination","floor","random","doMove","candidateMoves","idx","neededProgess","findMoves","groupSizes","siz","getOversize","distroTable","setPupilsGroups","ResultTable","list","keys","Object","csv","k","resO","obj","String","toString","dataURL","encodeURIComponent","className","href","download","Input","useState","gradeLevel","setGradeLevel","levelSlicer","setLevelSlicer","slicerState","setSlicerState","sliceCount","setSliceCount","setInitializer","setGroupRestrict","setGroupTolerance","setMove","setSpeed","relMoves","setRelMoves","setIterations","result","setResult","htmlFor","inputId","cssInputClass","parserOptions","onFileLoaded","displayString","style","display","type","step","id","min","onChange","e","target","valueAsNumber","value","disabled","onClick","configString","solve","print","clear","HelpDialog","data-toggle","data-target","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","Navbar","App","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.4f34b190.chunk.js","sourcesContent":["import { CourseBlock } from './CourseBlock';\nimport { Pupil } from './Pupil';\nimport { CourseCombination } from './CourseCombination';\n\nexport class Course {\n  readonly no: number;\n  readonly name: string;\n  private block?: CourseBlock;\n  private members: Pupil[];\n  private combinations: CourseCombination[];\n\n  constructor(theNo: number, name: string) {\n    this.no = theNo;\n    this.name = name;\n    this.members = [];\n    this.combinations = [];\n  }\n\n  public addMember(member: Pupil) {\n    this.members.push(member);\n  }\n\n  public addCombination(combi: CourseCombination) {\n    this.combinations.push(combi);\n  }\n\n  public getIndex() {\n    return this.no;\n  }\n\n  public setBlock(aBlock: CourseBlock) {\n    this.block = aBlock;\n  }\n\n  public getBlock(): CourseBlock {\n    if (this.block) {\n      return this.block;\n    } else {\n      throw new Error('Block not set.');\n    }\n  }\n\n  public getMemberCount(): number {\n    return this.members.length;\n  }\n\n  public getMembers() {\n    return this.members;\n  }\n\n  public getName() {\n    return this.name;\n  }\n\n  public getCombinations() {\n    return this.combinations;\n  }\n\n  public hasCommonPupil(other: Course): boolean {\n    return this.members.some((p) => other.members.includes(p));\n  }\n\n  /*\n   *  output support\n   */\n  public asLO() {\n    var lo: any = {\n      no: this.no,\n      name: this.name,\n      block: this.block?.getIndex(),\n      members: this.members.length,\n      combis: this.combinations.length,\n    };\n    return lo;\n  }\n}\n","import { Course } from './Course';\n\nexport class CourseBlock {\n  readonly no: number;\n  private courseList: Course[];\n  constructor(theNo: number, courseList: Course[]) {\n    this.no = theNo;\n    this.courseList = courseList;\n    const self = this;\n    courseList.forEach((c) => c.setBlock(self));\n  }\n  public getIndex() {\n    return this.no;\n  }\n}\n","import { Course } from './Course';\nimport { Pupil } from './Pupil';\n\nexport class CourseCombination {\n  readonly no: number;\n  readonly name: string;\n  private courseList: Course[];\n  private members: Pupil[];\n  private combiSize: number;\n\n  // holds all course combinations sharing at least one course\n  private connectedCombis?: CourseCombination[];\n\n  constructor(theNo: number, name: string, courses: Course[]) {\n    this.no = theNo;\n    this.name = name;\n    this.courseList = courses;\n    this.members = [];\n    this.combiSize = 0;\n    var self = this;\n    this.courseList.forEach((course) => course?.addCombination(self));\n  }\n\n  /**\n   * initializes connected combis.\n   * may only be called once after all combis are created!\n   */\n  public initConnectedCombis() {\n    var otherCombis = new Set<CourseCombination>();\n    var allMembers = new Set<Pupil>();\n    this.courseList.forEach((course) => {\n      if (course != null) {\n        course.getCombinations().forEach((combi) => otherCombis.add(combi));\n        course.getMembers().forEach((pupil) => allMembers.add(pupil));\n      }\n    });\n    otherCombis.delete(this);\n    this.connectedCombis = Array.from(otherCombis);\n    this.combiSize = allMembers.size;\n  }\n\n  public getIndex() {\n    return this.no;\n  }\n\n  public addMember(member: Pupil) {\n    this.members.push(member);\n  }\n\n  public getCourses(): Course[] {\n    return this.courseList;\n  }\n\n  public getConnectedCombis(): CourseCombination[] {\n    return this.connectedCombis!;\n  }\n\n  public getMember(i: number) {\n    return this.members[i];\n  }\n\n  public getMemberCount(): number {\n    return this.members.length;\n  }\n\n  public getCombiSize(): number {\n    return this.combiSize;\n  }\n\n  public getContacts(): number {\n    return this.members.length * (this.combiSize - 1);\n  }\n\n  /*\n   *  output support\n   */\n  public asLO() {\n    var lo: any = {\n      no: this.no,\n      count: this.members.length,\n      combiSize: this.combiSize,\n      contacts: this.getContacts(),\n      crossCombis: this.connectedCombis?.length,\n    };\n    this.courseList.forEach((course, i) => {\n      lo['Block-' + i] = course == null ? '--' : course.getName();\n    });\n    return lo;\n  }\n}\n","import { CourseCombination } from './CourseCombination';\n\nexport class Pupil {\n  readonly no: number;\n  readonly firstname: string;\n  readonly lastname: string;\n  private courseCombination!: CourseCombination;\n\n  constructor(theNo: number, lastname: string, firstname: string) {\n    this.no = theNo;\n    this.firstname = firstname;\n    this.lastname = lastname;\n  }\n\n  public setCourseCombination(combi: CourseCombination) {\n    this.courseCombination = combi;\n  }\n\n  public getCourseCombination() {\n    return this.courseCombination;\n  }\n\n  public getIndex() {\n    return this.no;\n  }\n\n  /*\n   *  output support\n   */\n  public asLO() {\n    var lo: any = {\n      no: this.no,\n      lastname: this.lastname,\n      firstname: this.firstname,\n      combi: this.courseCombination.getIndex(),\n      group: \"--\"\n    };\n    this.courseCombination.getCourses().forEach((course, i) => {\n      lo['block-' + i] = course == null ? '--' : course.getName();\n    });\n    return lo;\n  }\n}\n","import { Course } from './Course';\nimport { CourseBlock } from './CourseBlock';\nimport { CourseCombination } from './CourseCombination';\nimport { Pupil } from './Pupil';\n\nexport class GradeLevel {\n  private pupilList: Pupil[];\n  private courseList: Course[];\n  private combinationList: CourseCombination[];\n  private blockList: CourseBlock[];\n\n  constructor(data: string[][]) {\n    this.pupilList = [];\n    this.courseList = [];\n    this.combinationList = [];\n    this.blockList = [];\n\n    this.initFromData(data);\n  }\n\n  private initFromData(data: string[][]) {\n    var pupilCourses: Course[][];\n    var currentCourses: Course[];\n    var courseMap: Map<string, Course>;\n    courseMap = new Map();\n    pupilCourses = [];\n    data\n      .slice(1)\n      .forEach((fields) => {\n        if (fields.length > 2) {\n          const pupil = new Pupil(this.pupilList.length, fields[0], fields[1]);\n          this.pupilList.push(pupil);\n          currentCourses = [];\n          pupilCourses.push(currentCourses);\n          fields.slice(2).forEach((courseName) => {\n            if (courseName.length > 0) {\n              const course = this.getCourse(courseMap, courseName);\n              course.addMember(pupil);\n              currentCourses.push(course);\n            }\n          });\n        }\n      });\n    this.initBlocks();\n    this.sortCoursesByBlock(pupilCourses);\n    this.initCourseCombinations(pupilCourses);\n  }\n\n  private sortCoursesByBlock(pupilCourses: Course[][]) {\n    for (let i = 0; i < pupilCourses.length; i++) {\n      const courseList = pupilCourses[i];\n      var orderedList: Course[] = new Array(this.blockList.length).fill(null);\n      for (let j = 0; j < courseList.length; j++) {\n        const course = courseList[j];\n        orderedList[course.getBlock().getIndex()] = course;\n      }\n      pupilCourses[i] = orderedList;\n    }\n  }\n\n  private initCourseCombinations(pupilCourses: Course[][]) {\n    var combiMap = new Map<string, CourseCombination>();\n    var combiName: string;\n    var combi: CourseCombination;\n    for (let i = 0; i < pupilCourses.length; i++) {\n      const courses = pupilCourses[i];\n      combiName = this.nameForCourseList(courses);\n      if (combiMap.has(combiName)) {\n        combi = combiMap.get(combiName)!;\n      } else {\n        combi = new CourseCombination(\n          this.combinationList.length,\n          combiName,\n          courses\n        );\n        combiMap.set(combiName, combi);\n        this.combinationList.push(combi);\n      }\n      this.pupilList[i].setCourseCombination(combi);\n      combi.addMember(this.pupilList[i]);\n    }\n    this.combinationList.forEach((combi) => combi.initConnectedCombis());\n  }\n\n  private nameForCourseList(courses: Course[]): string {\n    return courses.reduce(\n      (res, entry) =>\n        res.concat(entry == null ? '--' : entry.getName()).concat(';'),\n      ''\n    );\n  }\n\n  /**\n   * calculate blocks of courses running at the same time\n   * within one block a pupil can only be member of one course.\n   */\n  private initBlocks() {\n    var indices: number[];\n    var seenPupil: Pupil[];\n    var blockCourses: Course[];\n    var blockNo: number = 0;\n    const courses = Array.from(this.courseList);\n    courses.sort((a, b) => b.getMemberCount() - a.getMemberCount());\n\n    while (courses.length !== 0) {\n      indices = [0];\n      blockCourses = [courses[0]];\n      seenPupil = courses[0].getMembers();\n      for (let i = 1; i < courses.length; i++) {\n        const next = courses[i];\n        if (!next.getMembers().some((p) => seenPupil.includes(p))) {\n          blockCourses.push(next);\n          indices.push(i);\n          seenPupil = seenPupil.concat(next.getMembers());\n          if (seenPupil.length === this.pupilList.length) break;\n        }\n      }\n      // remove used courses\n      for (let i = indices.length - 1; i >= 0; i--) {\n        courses.splice(indices[i], 1);\n      }\n      // build block\n      this.blockList.push(new CourseBlock(blockNo, blockCourses));\n      blockNo++;\n    }\n  }\n\n  public getMembers() {\n    return this.pupilList;\n  }\n\n  public getCourses() {\n    return this.courseList;\n  }\n\n  public getBlocks(): CourseBlock[] {\n    return this.blockList;\n  }\n\n  public getCombinations(): CourseCombination[] {\n    return this.combinationList;\n  }\n\n  private getCourse(courseMap: Map<string, Course>, name: string): Course {\n    if (courseMap.has(name)) {\n      return courseMap.get(name)!;\n    } else {\n      const course = new Course(this.courseList.length, name);\n      this.courseList.push(course);\n      courseMap.set(name, course);\n      return course;\n    }\n  }\n\n  public getContacts(): number {\n    return this.combinationList.reduce(\n      (sum, combi) => sum + combi.getContacts(),\n      0\n    );\n  }\n  /*\n   *  output support\n   */\n\n  public displayString() {\n    return `Pupils: ${this.pupilList.length}; Courses: ${\n      this.courseList.length\n    }; Blocks: ${this.blockList.length}; Combinations: ${\n      this.combinationList.length\n    }; Contacts: ${this.getContacts()}`;\n  }\n\n  public print() {\n    console.log('PUPILS');\n    console.table(this.pupilTable());\n    console.log('COURSE COMBINATIONS');\n    console.table(this.combiTable());\n    console.log('COURSES');\n    console.table(this.courseTable());\n    console.log('CONTACTS : ' + this.getContacts());\n  }\n\n  public pupilTable() {\n    return this.pupilList.map((each) => each.asLO());\n  }\n\n  public courseTable() {\n    return this.courseList.map((each) => each.asLO());\n  }\n\n  public combiTable() {\n    return this.combinationList.map((each) => each.asLO());\n  }\n}\n","export class Move {\n  public readonly combination: number;\n  public readonly from: number;\n  public readonly to: number;\n  public readonly progress: number;\n\n  constructor(combination: number, from: number, to: number, progress: number) {\n    this.combination = combination;\n    this.from = from;\n    this.to = to;\n    this.progress = progress;\n  }\n}\n","import { CourseCombination } from './CourseCombination';\nimport { LevelSlicer } from './LevelSlicer';\nimport { Move } from './Move';\n\nexport class CombiDistribution {\n  readonly no: number;\n  readonly size: number;\n  readonly slicer: LevelSlicer;\n  readonly combi: CourseCombination;\n  readonly courseIndices: number[];\n  readonly memberCounts: number[];\n  readonly combiSizes: number[];\n  readonly connectedDistris: CombiDistribution[];\n\n  constructor(aCombi: CourseCombination, aSlicer: LevelSlicer) {\n    this.combi = aCombi;\n    this.slicer = aSlicer;\n    this.no = this.combi.getIndex();\n    this.size = aSlicer.getSize();\n    this.memberCounts = new Array(this.size).fill(0);\n    this.combiSizes = new Array(this.size).fill(0);\n    this.courseIndices = [];\n    this.combi.getCourses().forEach((course) => {\n      if (course != null) {\n        this.courseIndices.push(course.getIndex());\n      }\n    });\n    // wll be filled after complete creation of distris\n    this.connectedDistris = [];\n  }\n\n  /**\n   * called only once after creation of all instances.\n   *\n   * @param allDistris all created instances in slicer.\n   */\n  public fillConnected(allDistris: CombiDistribution[]) {\n    this.combi.getConnectedCombis().forEach((connected) => {\n      this.connectedDistris.push(allDistris[connected.getIndex()]);\n    });\n  }\n\n  public getIndex() {\n    return this.no;\n  }\n\n  public getContacts(slice?: number): number {\n    if (slice === undefined) {\n      return this.memberCounts.reduce(\n        (sum, _, i) => sum + this.getContacts(i),\n        0\n      );\n    } else {\n      return this.memberCounts[slice] * (this.combiSizes[slice] - 1);\n    }\n  }\n\n  public getMemberCounts() {\n    return this.memberCounts;\n  }\n\n  public getMemberCount(slice?: number): number {\n    if (slice === undefined) {\n      return this.memberCounts.reduce(\n        (sum, _, i) => sum + this.getMemberCount(i),\n        0\n      );\n    } else {\n      return this.memberCounts[slice];\n    }\n  }\n\n  public getCombination() {\n    return this.combi;\n  }\n\n  /**\n   * optimization workhorse.\n   * find moves for optimization.\n   *\n   * @param minProgress minimal progess in contacts\n   * @param maxSize maximal membe count of groups\n   */\n  public findMoves(minProgress: number, onlyOversizedCourses: boolean, resultList: Move[]) {\n    var courseSizes: number[][];\n    var maxSizes: number[];\n    var sources: number[];\n    var targets: number[];\n    var sourceAdvantages: number[];\n    var targetPenaltys: number[];\n\n    courseSizes = this.slicer.getCourseSizes();\n    maxSizes = this.slicer.getMaxSizes();\n    // find allowed sources\n    sources = this.memberCounts\n      .map((_, i) => i)\n      .filter((i) => this.memberCounts[i] > 0);\n    if (onlyOversizedCourses) {\n      sources = sources.filter((slice) => {\n        return this.courseIndices.some(\n          (courseIdx) => courseSizes[courseIdx][slice] > maxSizes[courseIdx]\n        );\n      });\n    }\n    if (sources.length === 0) {\n      return ;\n    }\n\n    // find allowed targets with size of all courses less than maxSize\n    targets = this.memberCounts\n      .map((_, i) => i)\n      .filter((slice) => {\n        return this.courseIndices.every(\n          (courseIdx) => courseSizes[courseIdx][slice] < maxSizes[courseIdx]\n        );\n      });\n\n    // fast exit if no move possible\n    if (\n      sources.length === 0 ||\n      targets.length === 0 ||\n      (sources.length === 1 &&\n        targets.length === 1 &&\n        sources[0] === targets[0])\n    ) {\n      return ;\n    }\n\n    // calculate expected changes of contacts\n    sourceAdvantages = sources.map((i) => this.advantageOnRemoveFrom(i));\n    targetPenaltys = targets.map((i) => this.penaltyOnAddTo(i));\n\n    // find valid moves\n    sources.forEach((from, fromIdx) => {\n      targets.forEach((to, toIdx) => {\n        if (\n          from !== to &&\n          sourceAdvantages[fromIdx] - targetPenaltys[toIdx] >= minProgress\n        ) {\n          resultList.push(\n            new Move(\n              this.getIndex(),\n              from,\n              to,\n              sourceAdvantages[fromIdx] - targetPenaltys[toIdx]\n            )\n          );\n        }\n      });\n    });\n  }\n\n  /**\n   * calculate the shrink in contacts if removing one pupil from slice\n   * @param slice index of slice to remove pupil from\n   */\n  private advantageOnRemoveFrom(slice: number): number {\n    // change in own combi caused by members and size change\n    var res = this.memberCounts[slice] + this.combiSizes[slice] - 2;\n    // in connected combis only the size changes by one\n    return this.connectedDistris.reduce(\n      (sum, other) => sum + other.memberCounts[slice],\n      res\n    );\n  }\n\n  /**\n   * calculate the growth in contacts if adding one pupil to slice\n   * @param slice index of slice to remove pupil from\n   */\n  private penaltyOnAddTo(slice: number): number {\n    // change in own combi caused by members and size change\n    var res = this.memberCounts[slice] + this.combiSizes[slice];\n    // in connected combis only the size changes by one\n    return this.connectedDistris.reduce(\n      (sum, other) => sum + other.memberCounts[slice],\n      res\n    );\n  }\n\n  public doMove(move: Move) {\n    this.removeMemberFromSlice(1, move.from);\n    this.addMemberToSlice(1, move.to);\n  }\n\n  public addMemberToSlice(count: number, slice: number) {\n    this.memberCounts[slice] += count;\n    this.combiSizes[slice] += count;\n    this.connectedDistris.forEach((dist) => (dist.combiSizes[slice] += count));\n    var cs = this.slicer.getCourseSizes();\n    this.courseIndices.forEach((i) => (cs[i][slice] += count));\n  }\n\n  public removeMemberFromSlice(count: number, slice: number) {\n    this.memberCounts[slice] -= count;\n    this.combiSizes[slice] -= count;\n    this.connectedDistris.forEach((dist) => (dist.combiSizes[slice] -= count));\n    var cs = this.slicer.getCourseSizes();\n    this.courseIndices.forEach((i) => (cs[i][slice] -= count));\n  }\n\n  /*\n   *  output support\n   */\n  public asLO() {\n    var lo: any = this.combi.asLO();\n    for (let i = 0; i < this.size; i++) {\n      lo['Count-' + i] = this.memberCounts[i];\n      lo['CombiSize-' + i] = this.combiSizes[i];\n      lo['Contacts-' + i] = this.getContacts(i);\n    }\n    return lo;\n  }\n\n  public setPupilsGroups(pupilsTable: any[]) {\n    var pos = 0;\n    this.memberCounts.forEach((count, i) => {\n      var max = pos + count;\n      while (pos < max) {\n        pupilsTable[this.combi.getMember(pos).getIndex()].group = i;\n        pos ++;\n      }\n    }) \n  }\n}\n","import { GradeLevel } from './GradeLevel';\nimport { CombiDistribution } from './CombiDistribution';\nimport { Move } from './Move';\n\nexport class LevelSlicer {\n  readonly size: number;\n  readonly level: GradeLevel;\n  readonly distributions: CombiDistribution[];\n  readonly courseSizes: number[][];\n  readonly maxSizes: number[];\n  private cfgString: string;\n  readonly moveRandom: boolean;\n  private reduceGroups: boolean = false;\n  private finished: boolean = false;\n  private moveList: Move[];\n  private moveTolerance: number;\n  private moveSlowly: boolean;\n\n  public static solve(\n    aSize: number,\n    aLevel: GradeLevel,\n    initializer: string,\n    move: string,\n    speed: string,\n    moveTolerance: number,\n    groupRestrict: string,\n    groupTolerance: number,\n    iterations: number\n  ) : LevelSlicer {\n    var best : LevelSlicer;\n    var contacts : number;\n    var count: number = 0;\n\n    best = new LevelSlicer(aSize, aLevel,initializer,move, speed, moveTolerance, groupRestrict,groupTolerance);\n    best.optimize();\n    contacts = best.getContacts();\n    console.log(best.statusString());\n    do {\n      var current : LevelSlicer;\n      var currentContacts : number;\n      \n      count ++;\n      current = new LevelSlicer(aSize, aLevel,initializer,move, speed, moveTolerance, groupRestrict,groupTolerance);\n      current.optimize();\n      currentContacts = current.getContacts();\n      console.log(current.statusString());\n      if (currentContacts < contacts) {\n        best = current;\n        contacts = currentContacts;\n      }\n    } while (count < iterations);\n    return best;\n  }\n\n  constructor(\n    aSize: number,\n    aLevel: GradeLevel,\n    initializer: string,\n    move: string,\n    speed: string,\n    moveTolerance: number,\n    groupRestrict: string,\n    groupTolerance: number\n  ) {\n    if (aSize < 2) {\n      throw new Error('size must be at least 2');\n    }\n    // init fields\n    this.size = aSize;\n    this.level = aLevel;\n    this.courseSizes = new Array(this.level.getCourses().length);\n    for (let i = 0; i < this.courseSizes.length; i++) {\n      this.courseSizes[i] = new Array(this.size).fill(0);\n    }\n    this.distributions = [];\n    this.distributions = this.level\n      .getCombinations()\n      .map((combi) => new CombiDistribution(combi, this));\n    this.distributions.forEach((dist) =>\n      dist.fillConnected(this.distributions)\n    );\n    // init groups\n    this.cfgString = \"Groups: \" + this.size + \"; \";\n    this.cfgString += \"Initial Groups: \" + initializer + \"; \";\n    if (initializer === 'random') {\n      this.initRandomlyDistributed();\n    } else {\n      this.initAllIntoFirstSlice();\n    }\n    // init max sizes\n    this.reduceGroups = true;\n    this.cfgString = this.cfgString +'Group size: ';\n    this.maxSizes = new Array(this.courseSizes.length);\n    if (groupRestrict === 'max') {\n      var max = this.level\n      .getCourses()\n      .reduce((res, course) => Math.max(res, course.getMemberCount()), 0);\n      max = Math.ceil(max / this.size) + groupTolerance;\n      this.maxSizes.fill(max);\n      this.cfgString += 'max ' + max + '; ';\n    } else if (groupRestrict === 'each') {\n      this.level.getCourses().forEach((course) => {\n        this.maxSizes[course.getIndex()] =\n        Math.ceil(course.getMemberCount() / this.size) + groupTolerance;\n      });\n      this.cfgString += 'by course with tolerance ' + groupTolerance + '; ';\n    } else {\n      this.reduceGroups = false;\n      this.maxSizes.fill(this.level.getMembers().length);\n      this.cfgString += 'unrestricted; ';\n    }\n    // init move policy\n    this.moveList = [];\n    this.moveSlowly = 'slow' === speed;\n    this.cfgString += this.moveSlowly\n      ? 'Move speed: slow; '\n      : 'Move speed: fast; ';\n    this.moveRandom = 'random' === move;\n    this.cfgString += this.moveRandom\n      ? 'Move: select random; '\n      : 'Move: use first best; ';\n    this.moveTolerance = moveTolerance / 100;\n    this.cfgString += \"Move tolerance: \" + moveTolerance + \"; \"\n  }\n\n  private initAllIntoFirstSlice() {\n    this.distributions.forEach((dist) => {\n      dist.addMemberToSlice(dist.getCombination().getMemberCount(), 0);\n    });\n  }\n\n  private initRandomlyDistributed() {\n    var indices = this.level\n      .getMembers()\n      .map((pupil) => pupil.getCourseCombination().getIndex());\n    var slice = 0;\n    while (indices.length > 0) {\n      var pos = Math.floor(Math.random() * indices.length);\n      this.distributions[indices[pos]].addMemberToSlice(1, slice);\n      indices.splice(pos, 1);\n      slice = (slice + 1) % this.size;\n    }\n  }\n\n  public optimize() {\n    while ( !this.finished) {\n      this.doMove();\n    }\n  }\n\n  /**\n   * optimization workhouse\n   */\n  public doMove() {\n    var neededProgess = 1;\n    var candidateMoves: Move[];\n\n    // check for force downsize\n    // var force = this.courseSizes.some((sliceSizes, courseIndex) => {\n    //   return sliceSizes.some((siz) => siz > this.maxSizes[courseIndex]);\n    // });\n    // if in reduce groups mode contacts may grow\n    if (this.reduceGroups) {\n      neededProgess = - (this.level.getMembers().length * (this.level.getMembers().length - 1));\n    }\n\n    // calculate candidates\n    candidateMoves = [];\n    this.distributions.forEach((dist) => {\n      dist.findMoves(neededProgess, this.reduceGroups, candidateMoves);\n    });\n\n    // change mode if no moves available\n    if (candidateMoves.length === 0) {\n        if (this.reduceGroups) {\n            this.reduceGroups = false;\n        } else {\n            this.finished = true;\n        }\n    } else {\n      // sort candidates\n      candidateMoves.sort((a, b) => b.progress - a.progress);\n      // select candidate\n      var idx: number; \n      if (this.moveRandom) {\n        idx = Math.floor(Math.random() * candidateMoves.length * this.moveTolerance);\n      } else {\n        idx = 0;\n      }\n      // take first or last move\n      var move;\n      if (this.reduceGroups ||  ! this.moveSlowly) {\n        move = candidateMoves[candidateMoves.length - 1 - idx];\n      } else {\n        move = candidateMoves[idx];\n      }\n      \n      // execute move\n      this.distributions[move.combination].doMove(move);\n      this.moveList.push(move);\n    }\n  }\n\n  public getSize() {\n    return this.size;\n  }\n\n  public getCourseSizes() {\n    return this.courseSizes;\n  }\n\n  public getMaxSizes() {\n    return this.maxSizes;\n  }\n\n  public getOversize() {\n    return this.courseSizes.reduce((sum, groupSizes, i) => {\n      return groupSizes.reduce((res, siz) => \n        res + Math.max(0, siz - this.maxSizes[i]), sum)\n    } , 0);\n  }\n\n  public getContacts(slice?: number): number {\n    return this.distributions.reduce(\n      (sum, dist) => sum + dist.getContacts(slice),\n      0\n    );\n  }\n\n  public getMemberCount(slice?: number): number {\n    return this.distributions.reduce(\n      (sum, dist) => sum + dist.getMemberCount(slice),\n      0\n    );\n  }\n\n  /*\n   *  output support\n   */\n  public configString() {\n    return this.cfgString;\n    \n  }\n\n  public statusString() {\n    return `Groups: ${this.size}; Contacts: ${this.getContacts()}; Moves: ${this.moveList.length\n      }; Finished: ${this.finished}; Fixing sizes: ${this.reduceGroups}; Oversize: ${this.getOversize()}`;\n  }\n\n  public print() {\n    console.log('PUPILS');\n    console.table(this.pupilTable());\n    console.log('DISTRIBUTIONS');\n    console.table(this.distroTable());\n    console.log('COURSES');\n    console.table(this.courseTable());\n    console.log('CONTACTS : ' + this.getContacts());\n  }\n\n  public courseTable() {\n    var res: Object[] = [];\n    this.level.getCourses().forEach((course) => {\n      var lo = course.asLO();\n      for (let i = 0; i < this.size; i++) {\n        lo['Group-' + i] = this.courseSizes[course.getIndex()][i];\n      }\n      res.push(lo);\n    });\n    return res;\n  }\n\n  public distroTable() {\n    var res: Object[] = [];\n    this.distributions.forEach((dist) => res.push(dist.asLO()));\n    var sum: any = { no: 'Summe' };\n    for (let i = 0; i < this.size; i++) {\n      sum['Count-' + i] = this.getMemberCount(i);\n      sum['CombiSize-' + i] = '--';\n      sum['Contacts-' + i] = this.getContacts(i);\n    }\n    res.push(sum);\n    return res;\n  }\n\n  public pupilTable() {\n    var table: any[] = this.level.pupilTable();\n    this.distributions.forEach(dist => dist.setPupilsGroups(table));\n    return table;\n  }\n\n}\n","import React from 'react';\r\n\r\nconst ResultTable: React.FC<{list?: any[]}> = ({list}) => {\r\n  if (!list || list.length === 0) {return null};\r\n  var keys = Object.keys(list[0])\r\n  var csv = \"\";\r\n  csv = keys.reduce((res, k) => res + k + \";\", csv) + \"\\r\\n\";\r\n  csv  = list.reduce((resO, obj) => {\r\n      return keys.reduce((res, k) => res + obj[k] +\";\" , resO) + \"\\r\\n\";\r\n  }, csv )\r\n  String.toString()\r\n  var dataURL = \"data:text/csv;charset=UTF-8,\" + encodeURIComponent(csv);; \r\n  return (\r\n    <div>\r\n      <div>\r\n        <a className=\"btn btn-primary\" href={dataURL} download=\"result.csv\">CSV herunterladen</a>\r\n      </div>\r\n      <table className=\"table table-striped table-bordered table-sm\">\r\n        <thead className=\"thead-dark\">\r\n          <tr>\r\n            {keys.map(k => <td>{k}</td>)}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {list.map(obj => {\r\n            return (\r\n            <tr>\r\n              {keys.map(k => <td>{obj[k]}</td>)}\r\n            </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResultTable;\r\n","import React, { useState } from 'react';\nimport CSVReader from 'react-csv-reader';\nimport { GradeLevel } from '../domain/GradeLevel';\nimport { LevelSlicer } from '../domain/LevelSlicer';\nimport ResultTable from './ResultTable';\n\ninterface Props { }\n\nconst Input: React.FC<Props> = () => {\n  const [gradeLevel, setGradeLevel] = useState<GradeLevel>();\n  const [levelSlicer, setLevelSlicer] = useState<LevelSlicer>();\n  const [slicerState, setSlicerState] = useState(\"\");\n  const [sliceCount, setSliceCount] = useState(2);\n  const [initializer, setInitializer] = useState('first');\n  const [groupRestrict, setGroupRestrict] = useState('each');\n  const [groupTolerance, setGroupTolerance] = useState(1);\n  const [move, setMove] = useState('random');\n  const [speed, setSpeed] = useState('slow');\n  const [relMoves, setRelMoves] = useState(30);\n  const [iterations, setIterations] = useState(200);\n  const [result, setResult] = useState<any[]>();\n\n  return (\n    <main className=\"container-fluid\">\n      <h3>Eingabe</h3>\n      <div className=\"mb-3\">\n        <label htmlFor=\"csvUpload\" className=\"form-label\">\n          CSV Datei mit Daten auswählen:\n        </label>\n        <CSVReader \n          inputId=\"csvUpload\" \n          cssInputClass=\"form-control\" \n          parserOptions={{}} \n          onFileLoaded={data => {\n            const level = new GradeLevel(data);\n            setGradeLevel(level);\n            setLevelSlicer(undefined);\n            setSlicerState(\"\");\n            setResult(level.pupilTable());\n          }} \n        />\n        <p>{gradeLevel ? gradeLevel.displayString() : 'Bitte Daten laden.'}</p>\n      </div>\n\n      <h3 >Berechnen</h3>\n      <details>\n        <summary>\n          <h5 style={{ display: \"inline\" }}>Konfiguration</h5>\n        </summary>\n        <form>\n          <div className=\"form-row\">\n            <div className=\"form-group col-md-4\">\n              <label htmlFor=\"sliceInput\" className=\"form-label\">\n                Gruppen Anzahl: <b>{sliceCount}</b>\n              </label>\n              <input\n                className=\"form-control-range\"\n                type=\"range\"\n                step=\"1\"\n                id=\"sliceInput\"\n                min=\"2\"\n                max=\"10\"\n                onChange={(e) => setSliceCount(e.target.valueAsNumber)}\n                value={sliceCount}\n              />\n            </div>\n            <div className=\"form-group col-md-4\">\n              <label htmlFor=\"resrictSelect\" className=\"form-label\">\n                Begrenzung Gruppen Größe:\n              </label>\n              <select\n                id=\"resrictSelect\"\n                className=\"form-control\"\n                onChange={(e) => setGroupRestrict(e.target.value)}\n                value={groupRestrict}\n              >\n                <option value=\"none\">Keine Begrenzung</option>\n                <option value=\"max\">anhand größtem Kurs</option>\n                <option value=\"each\">je Kurs</option>\n              </select>\n            </div>\n            <div className=\"form-group col-md-4\">\n              <label htmlFor=\"toleranceInput\" className=\"form-label\">\n                Toleranz Gruppen Größe:\n              </label>\n              <input\n                type=\"number\"\n                id=\"toleranceInput\"\n                className=\"form-control\"\n                min=\"1\"\n                max=\"10\"\n                onChange={(e) => setGroupTolerance(e.target.valueAsNumber)}\n                value={groupTolerance}\n              />\n            </div>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"form-group col-md-3\">\n              <label htmlFor=\"initializerSelect\" className=\"form-label\">\n                Initialisierung:\n              </label>\n              <select\n                id=\"initializerSelect\"\n                className=\"form-control\"\n                onChange={(e) => setInitializer(e.target.value)}\n                value={initializer}\n              >\n                <option value=\"first\">Alle in erster Gruppe</option>\n                <option value=\"random\">zufällig verteilt</option>\n              </select>\n            </div>\n            <div className=\"form-group col-md-3\">\n              <label htmlFor=\"speedSelect\" className=\"form-label\">\n                Optimierung:\n              </label>\n              <select\n                id=\"speedSelect\"\n                onChange={(e) => setSpeed(e.target.value)}\n                className=\"form-control\"\n                value={speed}\n              >\n                <option value=\"slow\">Langsam</option>\n                <option value=\"fast\">Schnell</option>\n              </select>\n            </div>\n            <div className=\"form-group col-md-3\">\n              <label htmlFor=\"moveSelect\" className=\"form-label\">\n                Schrittauswahl:\n              </label>\n              <select\n                id=\"moveSelect\"\n                className=\"form-control\"\n                onChange={(e) => setMove(e.target.value)}\n                value={move}\n              >\n                <option value=\"first\">Deterministisch</option>\n                <option value=\"random\">Zufällig</option>\n              </select>\n            </div>\n            <div className=\"form-group col-md-3\">\n              <label htmlFor=\"relmovesInput\" className=\"form-label\">\n                Schrittauswahl aus: <b>{relMoves} % </b>\n              </label>\n              <input\n                type=\"range\"\n                id=\"relmovesInput\"\n                className=\"form-control-range\"\n                step=\"10\"\n                min=\"0\"\n                max=\"100\"\n                onChange={(e) => setRelMoves(e.target.valueAsNumber)}\n                value={relMoves}\n              />\n            </div>\n            <div className=\"form-group col-md-2\">\n              <button\n                className=\"form-control btn btn-outline-secondary\"\n                disabled = {!gradeLevel}\n                onClick={() => {\n                  if (gradeLevel) {\n                    var slicer = new LevelSlicer(\n                      sliceCount,\n                      gradeLevel,\n                      initializer,\n                      move,\n                      speed,\n                      relMoves,\n                      groupRestrict,\n                      groupTolerance\n                    );\n                    setLevelSlicer(slicer);\n                    setSlicerState(slicer.statusString());\n                    setResult(slicer.pupilTable());\n                  }\n                }}\n              >\n                Neue Teilung Erzeugen\n              </button>\n            </div>\n            <div className=\"form-group col-md-2\">\n              <button\n                className=\"form-control btn btn-outline-secondary\"\n                disabled = {!levelSlicer}\n                onClick={() => {\n                  if (levelSlicer) {\n                    levelSlicer.optimize();\n                    setSlicerState(levelSlicer.statusString());\n                    setResult(levelSlicer.pupilTable());\n                  }\n                }}\n              >\n                Teilung Optimieren\n              </button>\n            </div>\n            <div className=\"form-group col-md-2\">\n              <button\n                className=\"form-control btn btn-outline-secondary\"\n                disabled = {!levelSlicer}\n                onClick={() => {\n                  if (levelSlicer) {\n                    levelSlicer.doMove();\n                    setSlicerState(levelSlicer.statusString());\n                    setResult(levelSlicer.pupilTable());\n                  }\n                }}\n              >\n                Einzelschritt ausführen\n              </button>\n            </div>\n          </div>\n          <p>\n            {levelSlicer ? levelSlicer.configString() : 'Bitte Teilung erzeugen'}\n          </p>\n        </form>\n      </details>\n      <div>\n        <div className=\"form-group row container-fluid\">\n          <button\n              className=\"form-control col-sm-2 btn btn-primary\"\n              disabled = {!gradeLevel}\n              onClick={() => {\n                if (gradeLevel) {\n                  var slicer = LevelSlicer.solve(\n                    sliceCount,\n                    gradeLevel,\n                    initializer,\n                    move,\n                    speed,\n                    relMoves,\n                    groupRestrict,\n                    groupTolerance,\n                    iterations\n                  );\n                  setLevelSlicer(slicer);\n                  setSlicerState(slicer.statusString());\n                  setResult(slicer.pupilTable());\n                }\n              }}\n            >\n              Lösung berechnen\n          </button>\n          <label htmlFor=\"iterInput\" className=\"col-sm-2 col-form-label\">\n            Durchläufe:\n          </label>\n          <input\n            type=\"number\"\n            id=\"iterInput\"\n            className=\"col-sm-2 form-control\"\n            step=\"50\"\n            min=\"50\"\n            max=\"1000\"\n            onChange={(e) => setIterations(e.target.valueAsNumber)}\n            value={iterations}\n          />\n        </div>\n        <p>{slicerState ? slicerState : \"no Solution calculated\"}</p>\n      </div>\n      <h3>Ausgabe</h3>\n      <ResultTable list={result} />\n\n      <details>\n        <summary>\n          <h5 style={{ display: \"inline\" }}>Konsolen Ausgabe</h5>\n        </summary>\n        <div className=\"mb-3\">\n          <button\n            className=\"btn btn btn-outline-secondary\"\n            id=\"printTables\"\n            disabled = {!gradeLevel}\n            onClick={() => {\n              if (gradeLevel) {\n                gradeLevel.print();\n              }\n            }}\n          >\n            Eingangsdaten ausgeben\n          </button>\n          <button\n            className=\"btn btn btn-outline-secondary\"\n            disabled = {!levelSlicer}\n            onClick={() => {\n              if (levelSlicer) {\n                levelSlicer.print();\n              }\n            }}\n          >\n            Aktuelle Teilung ausgeben\n          </button>\n          <button\n            className=\"btn btn btn-outline-secondary\"\n            onClick={() => {\n              console.clear();\n            }}\n          >\n            Konsole zurücksetzen\n          </button>\n        </div>\n      </details>\n    </main>\n  );\n};\nexport default Input;\n","import React from 'react';\r\n\r\ninterface Props {}\r\n\r\nconst HelpDialog: React.FC<Props> = () => (\r\n  <div >\r\n    <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModalScrollable\">\r\n      Hilfe\r\n    </button>\r\n\r\n    <div className=\"modal fade\" id=\"exampleModalScrollable\" role=\"dialog\" aria-labelledby=\"exampleModalScrollableTitle\" aria-hidden=\"true\">\r\n      <div className=\"modal-dialog modal-dialog-scrollable modal-lg\" role=\"document\">\r\n        <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n            <h5 className=\"modal-title\" id=\"exampleModalScrollableTitle\">Hilfe</h5>\r\n            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n              <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n          </div>\r\n          <div className=\"modal-body\">\r\n            <h4>Überblick</h4>\r\n            <p>\r\n              Dieses Werkzeug dient zur Aufteilung einer Klassenstufe in mehrere Gruppen, die im Wechsel unterrichtet\r\n              werden. Es berücksichtigt insbesondere Klassenstufen, in denen der Unterricht nicht durchgängig im \r\n              Klassenverbund durchgeführt wird. Es kann also je Schüler eine individuelle Kursbelegung geben.\r\n            </p>\r\n            <p>\r\n              Lösungen werden heuristisch berechnet. Somit wird nicht unbedingt die optimale Lösung gefunden. \r\n              Hauptbedingung für eine gute Lösung ist eine möglichst geringe Anzahl an paarweisen Kontakten von Schülern.\r\n              Ein Kontakt entseht dabei, wenn zwei Schüler gemeinsam in einem Kurs sind. Zusätzlich können Beschränkungen\r\n              für die resultierende Kursgröße berücksichtigt werden.\r\n            </p>\r\n            <h4>Eingabe Format</h4>\r\n            <p> \r\n              Als Eingabe wird eine CSV Datei erwartet. Die erste Zeile der Datei wird ignoriert (Kopfzeile).\r\n              Alle weiteren Zeilen entsprechen einem Schüler. Die \r\n              ersten beiden Werte werden als Nachname und Vorname des Schülers verstanden. Alle weiteren Werte werden als Namen der \r\n              vom Schüler belegten Kurse interpretiert. Die Kursnamen müssen eindeutig sein, auch in der Schreibweise.  Leere Werte \r\n              sind zulässig und werden ignoriert. \r\n            </p>\r\n            <h4>Bedienung</h4>\r\n            <p>\r\n              Zunächst ist im Bereich <i>Eingabe</i> eine Datei im erwarteten Format zu laden. Im Bereich <i>Berechnen</i> kann bei \r\n              Bedarf die <i>Konfiguartion</i> angepasst werden (Details s.u.) und dann die <i>Lösung berechnet</i> werden. Bei der \r\n              Berechnung wird der Lösungsalgorithmus mehrmals durchlaufen und die beste gefundene Lösung ausgegeben. Die Anzahl\r\n              der <i>Durchläufe</i> kann vorgegeben werden.\r\n            </p>\r\n            <p>\r\n              Die Ausgabe der eingelesenen und berechneten Daten erfolgt im unteren Bereich tabellarisch und kann als CSV-Datei \r\n              gesichert werden. Die Tabelle enthält folgende Spalten:\r\n            </p>\r\n            <dl>\r\n              <dt>no</dt>\r\n              <dd>Nummer des Schülers</dd>\r\n              <dt>lastname</dt>\r\n              <dd>Nachname des Schülers</dd>\r\n              <dt>firstname</dt>\r\n              <dd>Vorname des Schülers</dd>\r\n              <dt>combi</dt>\r\n              <dd>\r\n                Eine numerische ID für die Kombination von belegten Kursen des Schülers. Genau die Schüler mit der identischen \r\n                Kursbelegung haben hier die selbe ID.\r\n              </dd>\r\n              <dt>group</dt>\r\n              <dd>\r\n                ID der Gruppe, der der Schüler bei der Teilung zugeordnet wurde. Die IDs werden numerisch vergeben beginnend  mit Null (0).\r\n              </dd>\r\n              <dt>block-n</dt>\r\n              <dd>\r\n                Name des Kurses den der Schüler im n-ten Block belegt. Die Aufteilung der Kurse auf Blöcke werden automatisch berechnet und \r\n                müssen somit nicht den echten zeitlichen Blöcken im Stundenplan entsprechen.  \r\n              </dd>\r\n            </dl>\r\n            <p>\r\n              <b><i>Hinweis:</i></b> Schüler in mit der selben Kursbelegung (combi) sind gleichwertig. Sollten Schüler aus einer Kursbelegung \r\n              auf unterschiedliche Gruppen verteilt worden sein, so ist für das Ergebnis irrelevant welcher konkrete Schüler in welcher\r\n              Gruppe ist. Es kann also innerhalb einer Kursbelegung getauscht werden, so lange die Anzahl der Schüler je Gruppe nicht\r\n              verändert wird.\r\n            </p>\r\n            <h4>Konfiguration</h4>\r\n            <p>\r\n              Optionen zur <i>Konfiguration</i> können auf Wunsch eingeblendet werden. Die Konfigurationen teilen sich in zwei Bereiche.\r\n              Unterhalb der Einstellungen existieren Buttons zur Einzeldurchführung der Optimierung und zur schrittweisen Ausführung.\r\n            </p>\r\n            <h5>Grupen Einstellungen</h5>\r\n            <dl>\r\n              <dt>Anzahl Gruppen</dt>\r\n              <dd>Legt fest in wieviele Gruppen der Jahrgang aufgeteilt werden soll. Möglich sind 2 bis 5 Gruppen.</dd>\r\n              <dt>Begrenzung Gruppen Größe.</dt>\r\n              <dd>\r\n                Definiert die maximale Gruppen Größe. Optionen sind:\r\n                <ul>\r\n                  <li><b>Keine Begrenzung</b> - Die Größe der resultierenden Kurse ist unbegrenzt</li>\r\n                  <li\r\n                    ><b>anhand größtem Kurs</b> - Die Größe der resultierenden Kurse ist begrenzt durch die Größe des \r\n                    größten Kurses geteilt durch die Anzahl Gruppen.\r\n                  </li>\r\n                  <li>\r\n                    <b>je Kurs</b> - Die Größe der resultierenden Kurse ist begrenzt durch die Größe des \r\n                    jeweilgen Kurses geteilt durch die Anzahl Gruppen.\r\n                  </li>\r\n                </ul>\r\n              </dd>\r\n              <dt>Toleranz Gruppen Größe</dt>\r\n              <dd>\r\n                Bei einer Begrenzung der Gruppen Größe dürfen die Größen der resultierenden Kurse die Begrenzung um diese\r\n                Anzahl an Schülern übersteigen.\r\n              </dd>\r\n            </dl>\r\n            <h5>Parameter des Algorithmus</h5>\r\n            <dl>\r\n              <dt>Initialisierung</dt>\r\n              <dd>\r\n                Legt die initiale Verteilung der Schüler auf Gruppen fest. Entweder werden initial alle Schüler der \r\n                ersten Gruppe zugeordnet oder die Verteilung erfolgt zufällig gleichverteilt auf alle Gruppen.\r\n              </dd>\r\n              <dt>Optimierung</dt>\r\n              <dd>\r\n                Legt fest ob der Algorithmus sich bevorzugt langsam oder schnell dem Ziel nähert. Abhängig von dieser Einstellung \r\n                wird in jeder Runde entweder der Schritt mit der kleinsten oder der größten Verbesserung zur Ausführung gewählt.\r\n              </dd>\r\n              <dt>Schrittauswahl</dt>\r\n              <dd>\r\n                Bei deterministischer Auswahl wird der erste gefunden Schritt mit der kleinsten / größten Verbesserung ausgeführt.\r\n                Bei zufälliger Auswahl wird aus den kleinsten / größten Schritten zufällig ein Schritt zur Ausführung ausgewählt.\r\n              </dd>\r\n              <dt>Schritt Auswahl aus X %</dt>\r\n              <dd>\r\n                Legt fest, wieviel Prozent aller möglichen Schritte bei der zufälligen Auswahl berücksichtigt werden.\r\n              </dd>\r\n            </dl>\r\n            <h4>Algorithmus</h4>\r\n            <p>\r\n              Zur Initialisierung des Algorithmus wrden die Schüler auf Gruppen verteilt, entweder zufällig oder alle in die erste Gruppe.\r\n              Der Optimierungsalgorithmus arbeitet in zwei Phasen. In der ersten Phase wird die Verteilung so angepasst, dass die \r\n              angestrebten Größen der Teilkurse eingehalten werden. In der zweiten Phase wird die Verteilung so verändert, dass die \r\n              Anzahl der Kontakte möglichst gering wird.\r\n            </p>\r\n            <p>\r\n              Beide Phasen werden in Schritten durchgeführt. Ein Schritt ist dabei die Verschiebung eines Schülers von einer Gruppe in \r\n              eine andere Gruppe. Zur Festlegung eines Schrittes werden zunächst alle möglichen Schritte ermittelt, die zur Verbesserung \r\n              des aktuellen Phasenziels beitragen. Gibt es keine solchen Schritte ist die Phase abgeschlossen. Die gefundenen möglichen \r\n              Schritte werden gewichtet anhand der Verändeung an der Anzahl der Kontakte, die der jeweilge Schritt bewirken wird. Aus den\r\n              nach Gewicht sortierten Schritten wird der auszuführende Schritt gemäß dern gewählten Optioenn ausgewählt und ausgeführt. \r\n            </p>\r\n          </div> \r\n          <div className=\"modal-footer\">\r\n            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Schliessen</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n</div>\r\n);\r\n\r\nexport default HelpDialog;","import React from 'react';\nimport HelpDialog from './Navbar/HelpDialog';\n\ninterface Props {}\n\nconst Navbar: React.FC<Props> = () => (\n  <nav className=\"navbar navbar-light bg-light\">\n    <div className=\"container-fluid\">\n      <span className=\"navbar-brand mb-0 h1\">Klassenstufen Teiler</span>\n      <HelpDialog />\n    </div>\n  </nav>\n);\n\nexport default Navbar;\n","import React from 'react';\nimport Input from '../modules/Input';\nimport Navbar from '../modules/Navbar';\n\nconst App: React.FC<{}> = () => (\n  <>\n    <Navbar />\n    <Input />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './pages/App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}